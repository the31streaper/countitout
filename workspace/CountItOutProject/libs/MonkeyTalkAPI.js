/***** DO NOT EDIT THIS FILE *****/
// MonkeyTalkAPI.js generated by MonkeyTalk at 2012-12-20 22:10:02 MST

/*  MonkeyTalk - a cross-platform functional testing tool
    Copyright (C) 2012 Gorilla Logic, Inc.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>. */

importClass(com.gorillalogic.monkeytalk.Command);
importClass(com.gorillalogic.monkeytalk.sender.CommandSender);
importClass(com.gorillalogic.monkeytalk.processor.PlaybackStatus);
importClass(com.gorillalogic.monkeytalk.processor.Scope);

var MT = {};

MT.isNumber = function(v) {
	return !isNaN(v);
};

MT.isString = function(v) {
	var clazz = Object.prototype.toString.call(v).slice(8, -1);
	return v !== undefined && v !== null && clazz === 'String';
};

MT.asString = function(v) {
	return "" + v;
};

MT.getModifiers = function(args) {
	var lastArg = args[args.length - 1];
	var modifiers = new java.util.HashMap();
	if (!MT.isNumber(lastArg) && !MT.isString(lastArg)) {
		for (prop in lastArg) {
			modifiers.put(prop, MT.asString(lastArg[prop]));
		}
	}
	return modifiers;
};

MT.getArgList = function(args) {
	var argList = new java.util.ArrayList();
	for ( var i = 0; i < args.length; i++) {
		if (MT.isNumber(args[i]) || MT.isString(args[i])) {
			argList.add(MT.asString(args[i]));
		}
	}
	return argList;
};

/**
 * The base class for all MonkeyTalk objects
 * 
 * @class
 */
MT.MTObject = function(app, monkeyId) {
	this.monkeyId = monkeyId;
	this.app = app;
	this.componentType = "MTObject";
};

/**
 * An application at the specified host and port.
 * 
 * @class
 * @extends MT.MTObject
 * @param host
 *            the remote hostname or ip address where the application is
 *            running. Defaults to localhost.
 * @param port
 *            the port it's listening on. Defaults to 16862 (Android playback).
 * @param scriptDir
 *            the local directory in which to look for scripts
 */
MT.Application = function(host, port, scriptDir) {
	var h = host || "localhost";
	var p = port ? port : 16862;
	var dir = scriptDir ? scriptDir : ".";
	this.host = h;
	this.port = p;
	this.scriptDir = dir;
};

/**
 * Called by generated wrapper api's
 * 
 * @ignore
 */
MT.Application.prototype.play = function(mtobject, action, args, mods) {
	var cmd = new Command(mtobject.componentType, mtobject.monkeyId, action, args, mods);
	ScopeObj.setCurrentCommand(cmd);
	
	var result = ProcessorObj.runScript(cmd, ScopeObj);

	if (result == null) {
		return result;
	} else if (result.getStatus() == PlaybackStatus.OK) {
		return "" + result.getMessage();
	} else {
		throw "" + result.getMessage();
	}
};

/**
 * A MonkeyTalk script. The monkeyID is the name of the script. If no extension
 * is specified, then the script runner will first search for a .js file, and if
 * none is found, the runner will search for an .mt file.
 * 
 * @param app
 * @param monkeyId
 * @returns {MT.Script}
 */
MT.Script = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "Script";
};

MT.Script.prototype = new MT.MTObject;

/**
 * Run the script with zero-or-more arguments
 * 
 * @returns the script results
 */
MT.Script.prototype.run = function() {
	var argArray = [].slice.apply(arguments);
	var mods = MT.getModifiers(argArray);

	if (mods.length > 0) {
		argArray.pop();
	}
	var argList = MT.getArgList(argArray);
	
	var cmd = new Command('Script', this.monkeyId, 'Run', argList, mods);
	ScopeObj.setCurrentCommand(cmd);

	var result = ProcessorObj.runScript(cmd, ScopeObj);

	if (result == null) {
		return result;
	} else if (result.getStatus() == PlaybackStatus.OK) {
		return "" + result.getMessage();
	} else {
		throw "" + result.getMessage();
	}
};

/**
 * Run the script with the supplied csv file
 * 
 * @returns the script results
 */
MT.Script.prototype.runWith = function() {
	var argArray = [].slice.apply(arguments);
	var mods = MT.getModifiers(argArray);

	if (mods.length > 0) {
		argArray.pop();
	}
	var argList = MT.getArgList(argArray);

	var cmd = new Command("Script", this.monkeyId, "RunWith", argList, mods);
	ScopeObj.setCurrentCommand(cmd);

	var result = ProcessorObj.runScript(cmd, ScopeObj);

	if (result == null) {
		return result;
	} else if (result.getStatus() == PlaybackStatus.OK) {
		return "" + result.getMessage();
	} else {
		throw "" + result.getMessage();
	}
};

MT.Application.prototype.script = function(monkeyId) {
	return new MT.Script(this, monkeyId);
};

/**
 * A custom component type.
 * 
 * @extends MT.Script
 * @param app
 * @param monkeyId
 *            the monkeyId of this custom type instance
 * @param componentType
 *            the component type's name
 * @returns {MT.CustomType}
 */
MT.CustomType = function(app, monkeyId, componentType) {
	MT.Script.call(this, app, monkeyId);
	this.componentType = componentType;
};

MT.CustomType.prototype = new MT.Script;

/**
 * Run the given custom command as: Comp * Action
 */
MT.CustomType.prototype.run = function() {
	var argArray = [].slice.apply(arguments);
	var mods = MT.getModifiers(argArray);

	if (mods.length > 0) {
		argArray.pop();
	}
	var comp = argArray.shift();
	var act = argArray.shift();
	var argList = MT.getArgList(argArray);
	
	var cmd = new Command(comp, '*', act, argList, mods);
	ScopeObj.setCurrentCommand(cmd);

	var result = ProcessorObj.runScript(cmd, ScopeObj);

	if (result == null) {
		return result;
	} else if (result.getStatus() == PlaybackStatus.OK) {
		return "" + result.getMessage();
	} else {
		throw "" + result.getMessage();
	}
};

/**
 * A custom typed for the named type
 * 
 * @param monkeyId
 * @param componentType
 * @returns {MT.CustomCommand}
 */
MT.Application.customType = function(monkeyId, componentType) {
	return new MT.CustomType(app, monkeyId, componentType);
};


//
// CLASS: FlexDisplayObject
//
/**
 * 
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this FlexDisplayObject
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexDisplayObject = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "FlexDisplayObject";	
};

MT.FlexDisplayObject.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexDisplayObject} the upper-left-most visible FlexDisplayObject matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexDisplayObject = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexDisplayObject(this, monkeyId);
};

//
// METHOD: click
//
/**
 * Click
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexDisplayObject.prototype.click = function(keyModifier) {
	return this.app.play(this, "click", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: mousemove
//
/**
 * MouseMove
 * @param  {int} localX int localX
 * @param  {int} localY int localY
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexDisplayObject.prototype.mousemove = function(localX, localY, keyModifier) {
	return this.app.play(this, "mousemove", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexObject
//
/**
 * 
 * @class
 * @extends MT.FlexDisplayObject
 * @param app The MT.Application containing this FlexObject
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexObject = function(app, monkeyId) {
	MT.FlexDisplayObject.call(this, app, monkeyId);
	this.componentType = "FlexObject";	
};

MT.FlexObject.prototype = new MT.FlexDisplayObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexObject} the upper-left-most visible FlexObject matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexObject = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexObject(this, monkeyId);
};

//
// METHOD: changefocus
//
/**
 * ChangeFocus
 * @param  {Boolean} shiftKey Boolean shiftKey
 * @param  {String} keyCode String keyCode

 * @returns void 
 */
MT.FlexObject.prototype.changefocus = function(shiftKey, keyCode) {
	return this.app.play(this, "changefocus", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexObject.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkRichEditableText
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this SparkRichEditableText
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkRichEditableText = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "SparkRichEditableText";	
};

MT.SparkRichEditableText.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkRichEditableText} the upper-left-most visible SparkRichEditableText matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkRichEditableText = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkRichEditableText(this, monkeyId);
};

//
// METHOD: input
//
/**
 * Input
 * @param  {String} text String text

 * @returns void 
 */
MT.SparkRichEditableText.prototype.input = function(text) {
	return this.app.play(this, "input", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {int} position int position
 * @param  {int} direction int direction
 * @param  {String} detail String detail

 * @returns void 
 */
MT.SparkRichEditableText.prototype.scroll = function(position, direction, detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selecttext
//
/**
 * SelectText
 * @param  {int} beginIndex int beginIndex
 * @param  {int} endIndex int endIndex

 * @returns void 
 */
MT.SparkRichEditableText.prototype.selecttext = function(beginIndex, endIndex) {
	return this.app.play(this, "selecttext", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: changefocus
//
/**
 * ChangeFocus
 * @param  {Boolean} shiftKey Boolean shiftKey
 * @param  {String} keyCode String keyCode

 * @returns void 
 */
MT.SparkRichEditableText.prototype.changefocus = function(shiftKey, keyCode) {
	return this.app.play(this, "changefocus", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: mousescroll
//
/**
 * MouseScroll
 * @param  {int} delta int delta

 * @returns void 
 */
MT.SparkRichEditableText.prototype.mousescroll = function(delta) {
	return this.app.play(this, "mousescroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {int} keyModifier int keyModifier

 * @returns void 
 */
MT.SparkRichEditableText.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexContainer
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexContainer
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexContainer = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexContainer";	
};

MT.FlexContainer.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexContainer} the upper-left-most visible FlexContainer matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexContainer = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexContainer(this, monkeyId);
};

//
// METHOD: dragcancel
//
/**
 * DragCancel
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexContainer.prototype.dragcancel = function(keyModifier) {
	return this.app.play(this, "dragcancel", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragdrop
//
/**
 * DragDrop
 * @param  {String} action String action
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexContainer.prototype.dragdrop = function(action, draggedItem, keyModifier) {
	return this.app.play(this, "dragdrop", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragenterwithpos
//
/**
 * DragEnterWithPos
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier
 * @param  {int} localX int localX
 * @param  {int} localY int localY
 * @param  {String} action String action

 * @returns void 
 */
MT.FlexContainer.prototype.dragenterwithpos = function(draggedItem, keyModifier, localX, localY, action) {
	return this.app.play(this, "dragenterwithpos", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragstartwithpos
//
/**
 * DragStartWithPos
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier
 * @param  {int} localX int localX
 * @param  {int} localY int localY
 * @param  {String} action String action

 * @returns void 
 */
MT.FlexContainer.prototype.dragstartwithpos = function(draggedItem, keyModifier, localX, localY, action) {
	return this.app.play(this, "dragstartwithpos", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragdropwithpos
//
/**
 * DragDropWithPos
 * @param  {String} action String action
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier
 * @param  {int} localX int localX
 * @param  {int} localY int localY
 * @param  {String} action String action

 * @returns void 
 */
MT.FlexContainer.prototype.dragdropwithpos = function(action, draggedItem, keyModifier, localX, localY) {
	return this.app.play(this, "dragdropwithpos", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragstart
//
/**
 * DragStart
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexContainer.prototype.dragstart = function(draggedItem, keyModifier) {
	return this.app.play(this, "dragstart", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragenter
//
/**
 * DragEnter
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexContainer.prototype.dragenter = function(draggedItem, keyModifier) {
	return this.app.play(this, "dragenter", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: mousescroll
//
/**
 * MouseScroll
 * @param  {int} delta int delta

 * @returns void 
 */
MT.FlexContainer.prototype.mousescroll = function(delta) {
	return this.app.play(this, "mousescroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {int} position int position
 * @param  {String} direction String direction
 * @param  {String} detail String detail

 * @returns void 
 */
MT.FlexContainer.prototype.scroll = function(position, direction, detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexForm
//
/**
 * 
 * @class
 * @extends MT.FlexContainer
 * @param app The MT.Application containing this FlexForm
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexForm = function(app, monkeyId) {
	MT.FlexContainer.call(this, app, monkeyId);
	this.componentType = "FlexForm";	
};

MT.FlexForm.prototype = new MT.FlexContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexForm} the upper-left-most visible FlexForm matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexForm = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexForm(this, monkeyId);
};


//
// CLASS: View
//
/**
 * Base class for all UI components. On iOS, monkeyId defaults to the accessibilityLabel. OnAndroid, monkeyId defaults to contentDescription if one exists, otherwise the component's tagvalue if it has a string value.
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this View
 * @param monkeyId A monkeyId or ordinal
 */
MT.View = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "View";	
};

MT.View.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.View} the upper-left-most visible View matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.view = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.View(this, monkeyId);
};

//
// METHOD: verify
//
/**
 * Verifies that a property of the component has some expected value.
 * @param  {String} expectedValue the expected value of the property. If null, verifies the existence of the component.
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.View.prototype.verify = function(expectedValue, propPath, failMessage) {
	return this.app.play(this, "verify", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: verifyNot
//
/**
 * Verifies that a property of the component does not have some value.
 * @param  {String} expectedValue the value the component shouldn't have. If null, verifies the non-existence of the component.
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.View.prototype.verifyNot = function(expectedValue, propPath, failMessage) {
	return this.app.play(this, "verifyNot", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: verifyRegex
//
/**
 * Verifies that a property of the component matches some regular expression.
 * @param  {String} regex the regular expression to match
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.View.prototype.verifyRegex = function(regex, propPath, failMessage) {
	return this.app.play(this, "verifyRegex", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: verifyNotRegex
//
/**
 * Verifies that a property of the component does not have a value matching a regularexpression.
 * @param  {String} regex the regular expression that should not match.
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.View.prototype.verifyNotRegex = function(regex, propPath, failMessage) {
	return this.app.play(this, "verifyNotRegex", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: verifyWildcard
//
/**
 * Verifies that a property of the component matches some wildcard expression.
 * @param  {String} wildcard the wildcard expression to match
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.View.prototype.verifyWildcard = function(wildcard, propPath, failMessage) {
	return this.app.play(this, "verifyWildcard", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: verifyNotWildcard
//
/**
 * Verifies that a property of the component does not have a value matching some wildcardexpression.
 * @param  {String} wildcard the wildcard expression that should not match
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.View.prototype.verifyNotWildcard = function(wildcard, propPath, failMessage) {
	return this.app.play(this, "verifyNotWildcard", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: tap
//
/**
 * Taps on the component. On Android, plays a 'click'. On iOS, plays aTouchDown/TouchMove/TouchUp sequence.

 * @returns void 
 */
MT.View.prototype.tap = function() {
	return this.app.play(this, "tap", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: longPress
//
/**
 * Performs a long press on the component. On Android, plays a 'longClick'. On iOS, plays alongPush gesture.

 * @returns void 
 */
MT.View.prototype.longPress = function() {
	return this.app.play(this, "longPress", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: touchDown
//
/**
 * Start touching the component.
 * @param  {int} x x-coordinate of the touch
 * @param  {int} y y-coordinate of the touch

 * @returns void 
 */
MT.View.prototype.touchDown = function(x, y) {
	return this.app.play(this, "touchDown", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: touchMove
//
/**
 * Drag across the component
 * @param  {int} coords one or more (x,y) coordinate pairs specifying the path of the drag gesture

 * @returns void 
 */
MT.View.prototype.touchMove = function(coords) {
	return this.app.play(this, "touchMove", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: touchUp
//
/**
 * Stop touching the component.
 * @param  {int} x x-coordinate of where touch is released
 * @param  {int} y y-coordinate of where touch is released

 * @returns void 
 */
MT.View.prototype.touchUp = function(x, y) {
	return this.app.play(this, "touchUp", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: pinch
//
/**
 * Pinch the component.
 * @param  {float} scale The scale factor relative to the points of the two touches in screen coordinates
 * @param  {float} velocity The velocity of the pinch in scale factor per second (read-only)

 * @returns void 
 */
MT.View.prototype.pinch = function(scale, velocity) {
	return this.app.play(this, "pinch", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: swipe
//
/**
 * A simple directional swipe across the component.
 * @param  {String} direction Left, Right, Up, or Down (case insensitive)

 * @returns void 
 */
MT.View.prototype.swipe = function(direction) {
	return this.app.play(this, "swipe", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: drag
//
/**
 * Touch down at the first coordinate pair, move from pair to pair for all the givencoordinates, and touch up at the last coordinate pair.
 * @param  {int} coords one or more (x,y) coordinate pairs specifying the path of a drag gesture

 * @returns void 
 */
MT.View.prototype.drag = function(coords) {
	return this.app.play(this, "drag", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: get
//
/**
 * Gets the value of the given property from the component, and set it into the given variablename.
 * @param  {String} variable the name of the variable to set
 * @param  {String} propPath the property name or path expression (defaults to 'value')

 * @returns String 
 */
MT.View.prototype.get = function(variable, propPath) {
	return this.app.play(this, "get", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: exec
//
/**
 * Call a method on a component. The method must take zero or more String arguments and return aString result.
 * @param  {String} method the method to call
 * @param  {String} args the String args to be supplied to the method

 * @returns String 
 */
MT.View.prototype.exec = function(method, args) {
	return this.app.play(this, "exec", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: DatePicker
//
/**
 * A component that edits a date. iOS: UIDatePicker. Android: DatePicker.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this DatePicker
 * @param monkeyId A monkeyId or ordinal
 */
MT.DatePicker = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "DatePicker";	
};

MT.DatePicker.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.DatePicker} the upper-left-most visible DatePicker matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.datePicker = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.DatePicker(this, monkeyId);
};

//
// METHOD: enterDate
//
/**
 * Enter the date value.
 * @param  {String} date A date with the format YYYY-MM-DD where YYYY is the year, MM is the month (01-12), and DD is the day (01-31).

 * @returns void 
 */
MT.DatePicker.prototype.enterDate = function(date) {
	return this.app.play(this, "enterDate", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: enterTime
//
/**
 * Enter the time value.
 * @param  {String} time A time with the format hh:mm am/pm, where hh is the hour (01-12), mm is the minute (00-59), and am/pm is the marker.

 * @returns void 
 */
MT.DatePicker.prototype.enterTime = function(time) {
	return this.app.play(this, "enterTime", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: enterDateAndTime
//
/**
 * Enter the date and time value.
 * @param  {String} dateAndTime A date and time with the format YYYY-MM-DD hh:mm am/pm, where YYYY is the year, MM is the month (01-12), DD is the day (01-31), hh is the hour (01-12), mm is the minute (00-59), and am/pm is the marker.

 * @returns void 
 */
MT.DatePicker.prototype.enterDateAndTime = function(dateAndTime) {
	return this.app.play(this, "enterDateAndTime", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: enterCountDownTimer
//
/**
 * Enter the count down timer value. (iOS only)
 * @param  {String} timer A timer with the format hh:mm, where hh is the hour (00-23), and mm is the minute (00-59).

 * @returns void 
 */
MT.DatePicker.prototype.enterCountDownTimer = function(timer) {
	return this.app.play(this, "enterCountDownTimer", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkSkinnableComponent
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this SparkSkinnableComponent
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkSkinnableComponent = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "SparkSkinnableComponent";	
};

MT.SparkSkinnableComponent.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkSkinnableComponent} the upper-left-most visible SparkSkinnableComponent matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkSkinnableComponent = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkSkinnableComponent(this, monkeyId);
};


//
// CLASS: SparkButtonBase
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableComponent
 * @param app The MT.Application containing this SparkButtonBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkButtonBase = function(app, monkeyId) {
	MT.SparkSkinnableComponent.call(this, app, monkeyId);
	this.componentType = "SparkButtonBase";	
};

MT.SparkButtonBase.prototype = new MT.SparkSkinnableComponent;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkButtonBase} the upper-left-most visible SparkButtonBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkButtonBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkButtonBase(this, monkeyId);
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {int} keyModifier int keyModifier

 * @returns void 
 */
MT.SparkButtonBase.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkButton
//
/**
 * 
 * @class
 * @extends MT.SparkButtonBase
 * @param app The MT.Application containing this SparkButton
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkButton = function(app, monkeyId) {
	MT.SparkButtonBase.call(this, app, monkeyId);
	this.componentType = "SparkButton";	
};

MT.SparkButton.prototype = new MT.SparkButtonBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkButton} the upper-left-most visible SparkButton matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkButton = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkButton(this, monkeyId);
};


//
// CLASS: SparkDataGroup
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this SparkDataGroup
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkDataGroup = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "SparkDataGroup";	
};

MT.SparkDataGroup.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkDataGroup} the upper-left-most visible SparkDataGroup matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkDataGroup = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkDataGroup(this, monkeyId);
};

//
// METHOD: select
//
/**
 * Select
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.SparkDataGroup.prototype.select = function(itemRenderer, triggerEvent, keyModifier) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexRule
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexRule
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexRule = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexRule";	
};

MT.FlexRule.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexRule} the upper-left-most visible FlexRule matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexRule = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexRule(this, monkeyId);
};


//
// CLASS: SparkSkinnableContainerBase
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableComponent
 * @param app The MT.Application containing this SparkSkinnableContainerBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkSkinnableContainerBase = function(app, monkeyId) {
	MT.SparkSkinnableComponent.call(this, app, monkeyId);
	this.componentType = "SparkSkinnableContainerBase";	
};

MT.SparkSkinnableContainerBase.prototype = new MT.SparkSkinnableComponent;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkSkinnableContainerBase} the upper-left-most visible SparkSkinnableContainerBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkSkinnableContainerBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkSkinnableContainerBase(this, monkeyId);
};


//
// CLASS: SparkSkinnableDataContainer
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableContainerBase
 * @param app The MT.Application containing this SparkSkinnableDataContainer
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkSkinnableDataContainer = function(app, monkeyId) {
	MT.SparkSkinnableContainerBase.call(this, app, monkeyId);
	this.componentType = "SparkSkinnableDataContainer";	
};

MT.SparkSkinnableDataContainer.prototype = new MT.SparkSkinnableContainerBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkSkinnableDataContainer} the upper-left-most visible SparkSkinnableDataContainer matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkSkinnableDataContainer = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkSkinnableDataContainer(this, monkeyId);
};

//
// METHOD: select
//
/**
 * Select
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.SparkSkinnableDataContainer.prototype.select = function(itemRenderer, triggerEvent, keyModifier) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexScrollBase
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexScrollBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexScrollBase = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexScrollBase";	
};

MT.FlexScrollBase.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexScrollBase} the upper-left-most visible FlexScrollBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexScrollBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexScrollBase(this, monkeyId);
};

//
// METHOD: mousescroll
//
/**
 * MouseScroll
 * @param  {int} delta int delta

 * @returns void 
 */
MT.FlexScrollBase.prototype.mousescroll = function(delta) {
	return this.app.play(this, "mousescroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexListBase
//
/**
 * 
 * @class
 * @extends MT.FlexScrollBase
 * @param app The MT.Application containing this FlexListBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexListBase = function(app, monkeyId) {
	MT.FlexScrollBase.call(this, app, monkeyId);
	this.componentType = "FlexListBase";	
};

MT.FlexListBase.prototype = new MT.FlexScrollBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexListBase} the upper-left-most visible FlexListBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexListBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexListBase(this, monkeyId);
};

//
// METHOD: deselect
//
/**
 * Deselect
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexListBase.prototype.deselect = function(itemRenderer, triggerEvent, keyModifier) {
	return this.app.play(this, "deselect", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: doubleclick
//
/**
 * DoubleClick
 * @param  {String} itemRenderer String itemRenderer

 * @returns void 
 */
MT.FlexListBase.prototype.doubleclick = function(itemRenderer) {
	return this.app.play(this, "doubleclick", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragcancel
//
/**
 * DragCancel
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexListBase.prototype.dragcancel = function(keyModifier) {
	return this.app.play(this, "dragcancel", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragdrop
//
/**
 * DragDrop
 * @param  {String} action String action
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexListBase.prototype.dragdrop = function(action, draggedItem, keyModifier) {
	return this.app.play(this, "dragdrop", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragstart
//
/**
 * DragStart
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexListBase.prototype.dragstart = function(draggedItem, keyModifier) {
	return this.app.play(this, "dragstart", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: mousescroll
//
/**
 * MouseScroll
 * @param  {int} delta int delta

 * @returns void 
 */
MT.FlexListBase.prototype.mousescroll = function(delta) {
	return this.app.play(this, "mousescroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: multiselect
//
/**
 * MultiSelect
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexListBase.prototype.multiselect = function(itemRenderer, triggerEvent, keyModifier) {
	return this.app.play(this, "multiselect", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {int} position int position
 * @param  {String} direction String direction
 * @param  {String} detail String detail

 * @returns void 
 */
MT.FlexListBase.prototype.scroll = function(position, direction, detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: select
//
/**
 * Select
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexListBase.prototype.select = function(itemRenderer, triggerEvent, keyModifier) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selectindex
//
/**
 * SelectIndex
 * @param  {int} itemIndex int itemIndex
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexListBase.prototype.selectindex = function(itemIndex, triggerEvent, keyModifier) {
	return this.app.play(this, "selectindex", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexListBase.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexList
//
/**
 * 
 * @class
 * @extends MT.FlexListBase
 * @param app The MT.Application containing this FlexList
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexList = function(app, monkeyId) {
	MT.FlexListBase.call(this, app, monkeyId);
	this.componentType = "FlexList";	
};

MT.FlexList.prototype = new MT.FlexListBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexList} the upper-left-most visible FlexList matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexList = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexList(this, monkeyId);
};

//
// METHOD: edit
//
/**
 * Edit
 * @param  {String} itemRenderer String itemRenderer
 * @param  {int} rowIndex int rowIndex
 * @param  {int} columnIndex int columnIndex

 * @returns void 
 */
MT.FlexList.prototype.edit = function(itemRenderer, rowIndex, columnIndex) {
	return this.app.play(this, "edit", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragenterwithpos
//
/**
 * DragEnterWithPos
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier
 * @param  {int} localX int localX
 * @param  {int} localY int localY
 * @param  {String} action String action

 * @returns void 
 */
MT.FlexList.prototype.dragenterwithpos = function(draggedItem, keyModifier, localX, localY, action) {
	return this.app.play(this, "dragenterwithpos", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragstartwithpos
//
/**
 * DragStartWithPos
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier
 * @param  {int} localX int localX
 * @param  {int} localY int localY
 * @param  {String} action String action

 * @returns void 
 */
MT.FlexList.prototype.dragstartwithpos = function(draggedItem, keyModifier, localX, localY, action) {
	return this.app.play(this, "dragstartwithpos", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragdropwithpos
//
/**
 * DragDropWithPos
 * @param  {String} action String action
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier
 * @param  {int} localX int localX
 * @param  {int} localY int localY
 * @param  {String} action String action

 * @returns void 
 */
MT.FlexList.prototype.dragdropwithpos = function(action, draggedItem, keyModifier, localX, localY) {
	return this.app.play(this, "dragdropwithpos", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexViewStack
//
/**
 * 
 * @class
 * @extends MT.FlexContainer
 * @param app The MT.Application containing this FlexViewStack
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexViewStack = function(app, monkeyId) {
	MT.FlexContainer.call(this, app, monkeyId);
	this.componentType = "FlexViewStack";	
};

MT.FlexViewStack.prototype = new MT.FlexContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexViewStack} the upper-left-most visible FlexViewStack matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexViewStack = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexViewStack(this, monkeyId);
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexViewStack.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexTabNavigator
//
/**
 * 
 * @class
 * @extends MT.FlexViewStack
 * @param app The MT.Application containing this FlexTabNavigator
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexTabNavigator = function(app, monkeyId) {
	MT.FlexViewStack.call(this, app, monkeyId);
	this.componentType = "FlexTabNavigator";	
};

MT.FlexTabNavigator.prototype = new MT.FlexViewStack;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexTabNavigator} the upper-left-most visible FlexTabNavigator matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexTabNavigator = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexTabNavigator(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {String} relatedObject String relatedObject

 * @returns void 
 */
MT.FlexTabNavigator.prototype.change = function(relatedObject) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexPanel
//
/**
 * 
 * @class
 * @extends MT.FlexContainer
 * @param app The MT.Application containing this FlexPanel
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexPanel = function(app, monkeyId) {
	MT.FlexContainer.call(this, app, monkeyId);
	this.componentType = "FlexPanel";	
};

MT.FlexPanel.prototype = new MT.FlexContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexPanel} the upper-left-most visible FlexPanel matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexPanel = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexPanel(this, monkeyId);
};


//
// CLASS: FlexMDIWindow
//
/**
 * 
 * @class
 * @extends MT.FlexPanel
 * @param app The MT.Application containing this FlexMDIWindow
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexMDIWindow = function(app, monkeyId) {
	MT.FlexPanel.call(this, app, monkeyId);
	this.componentType = "FlexMDIWindow";	
};

MT.FlexMDIWindow.prototype = new MT.FlexPanel;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexMDIWindow} the upper-left-most visible FlexMDIWindow matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexMDIWindow = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexMDIWindow(this, monkeyId);
};

//
// METHOD: close
//
/**
 * Close

 * @returns void 
 */
MT.FlexMDIWindow.prototype.close = function() {
	return this.app.play(this, "close", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: maximize
//
/**
 * Maximize

 * @returns void 
 */
MT.FlexMDIWindow.prototype.maximize = function() {
	return this.app.play(this, "maximize", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: minimize
//
/**
 * Minimize

 * @returns void 
 */
MT.FlexMDIWindow.prototype.minimize = function() {
	return this.app.play(this, "minimize", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: restore
//
/**
 * Restore

 * @returns void 
 */
MT.FlexMDIWindow.prototype.restore = function() {
	return this.app.play(this, "restore", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkListBase
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableDataContainer
 * @param app The MT.Application containing this SparkListBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkListBase = function(app, monkeyId) {
	MT.SparkSkinnableDataContainer.call(this, app, monkeyId);
	this.componentType = "SparkListBase";	
};

MT.SparkListBase.prototype = new MT.SparkSkinnableDataContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkListBase} the upper-left-most visible SparkListBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkListBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkListBase(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {int} newIndex int newIndex
 * @param  {int} oldIndex int oldIndex
 * @param  {String} inputType String inputType

 * @returns void 
 */
MT.SparkListBase.prototype.change = function(newIndex, oldIndex, inputType) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkButtonBarBase
//
/**
 * 
 * @class
 * @extends MT.SparkListBase
 * @param app The MT.Application containing this SparkButtonBarBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkButtonBarBase = function(app, monkeyId) {
	MT.SparkListBase.call(this, app, monkeyId);
	this.componentType = "SparkButtonBarBase";	
};

MT.SparkButtonBarBase.prototype = new MT.SparkListBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkButtonBarBase} the upper-left-most visible SparkButtonBarBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkButtonBarBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkButtonBarBase(this, monkeyId);
};


//
// CLASS: FlexComboBase
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexComboBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexComboBase = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexComboBase";	
};

MT.FlexComboBase.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexComboBase} the upper-left-most visible FlexComboBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexComboBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexComboBase(this, monkeyId);
};

//
// METHOD: close
//
/**
 * Close
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexComboBase.prototype.close = function(triggerEvent) {
	return this.app.play(this, "close", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: input
//
/**
 * Input
 * @param  {String} text String text

 * @returns void 
 */
MT.FlexComboBase.prototype.input = function(text) {
	return this.app.play(this, "input", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: open
//
/**
 * Open
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexComboBase.prototype.open = function(triggerEvent) {
	return this.app.play(this, "open", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {int} position int position
 * @param  {String} direction String direction
 * @param  {String} detail String detail

 * @returns void 
 */
MT.FlexComboBase.prototype.scroll = function(position, direction, detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selecttext
//
/**
 * SelectText
 * @param  {int} beginIndex int beginIndex
 * @param  {int} endIndex int endIndex

 * @returns void 
 */
MT.FlexComboBase.prototype.selecttext = function(beginIndex, endIndex) {
	return this.app.play(this, "selecttext", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexComboBase.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexComboBox
//
/**
 * 
 * @class
 * @extends MT.FlexComboBase
 * @param app The MT.Application containing this FlexComboBox
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexComboBox = function(app, monkeyId) {
	MT.FlexComboBase.call(this, app, monkeyId);
	this.componentType = "FlexComboBox";	
};

MT.FlexComboBox.prototype = new MT.FlexComboBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexComboBox} the upper-left-most visible FlexComboBox matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexComboBox = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexComboBox(this, monkeyId);
};

//
// METHOD: input
//
/**
 * Input
 * @param  {String} text String text

 * @returns void 
 */
MT.FlexComboBox.prototype.input = function(text) {
	return this.app.play(this, "input", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: select
//
/**
 * Select
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexComboBox.prototype.select = function(itemRenderer, triggerEvent, keyModifier) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexComboBox.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexChartSeries
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexChartSeries
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexChartSeries = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexChartSeries";	
};

MT.FlexChartSeries.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexChartSeries} the upper-left-most visible FlexChartSeries matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexChartSeries = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexChartSeries(this, monkeyId);
};

//
// METHOD: click
//
/**
 * Click
 * @param  {Number} hitSet Number hitSet

 * @returns void 
 */
MT.FlexChartSeries.prototype.click = function(hitSet) {
	return this.app.play(this, "click", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: doubleclick
//
/**
 * DoubleClick
 * @param  {Number} hitSet Number hitSet

 * @returns void 
 */
MT.FlexChartSeries.prototype.doubleclick = function(hitSet) {
	return this.app.play(this, "doubleclick", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: itemrollover
//
/**
 * ItemRollOver
 * @param  {Number} hitSet Number hitSet

 * @returns void 
 */
MT.FlexChartSeries.prototype.itemrollover = function(hitSet) {
	return this.app.play(this, "itemrollover", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexBubbleSeries
//
/**
 * 
 * @class
 * @extends MT.FlexChartSeries
 * @param app The MT.Application containing this FlexBubbleSeries
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexBubbleSeries = function(app, monkeyId) {
	MT.FlexChartSeries.call(this, app, monkeyId);
	this.componentType = "FlexBubbleSeries";	
};

MT.FlexBubbleSeries.prototype = new MT.FlexChartSeries;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexBubbleSeries} the upper-left-most visible FlexBubbleSeries matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexBubbleSeries = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexBubbleSeries(this, monkeyId);
};


//
// CLASS: FlexBox
//
/**
 * 
 * @class
 * @extends MT.FlexContainer
 * @param app The MT.Application containing this FlexBox
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexBox = function(app, monkeyId) {
	MT.FlexContainer.call(this, app, monkeyId);
	this.componentType = "FlexBox";	
};

MT.FlexBox.prototype = new MT.FlexContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexBox} the upper-left-most visible FlexBox matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexBox = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexBox(this, monkeyId);
};


//
// CLASS: FlexNavigationBar
//
/**
 * 
 * @class
 * @extends MT.FlexBox
 * @param app The MT.Application containing this FlexNavigationBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexNavigationBar = function(app, monkeyId) {
	MT.FlexBox.call(this, app, monkeyId);
	this.componentType = "FlexNavigationBar";	
};

MT.FlexNavigationBar.prototype = new MT.FlexBox;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexNavigationBar} the upper-left-most visible FlexNavigationBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexNavigationBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexNavigationBar(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {String} relatedObject String relatedObject

 * @returns void 
 */
MT.FlexNavigationBar.prototype.change = function(relatedObject) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexNavigationBar.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexButtonBar
//
/**
 * 
 * @class
 * @extends MT.FlexNavigationBar
 * @param app The MT.Application containing this FlexButtonBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexButtonBar = function(app, monkeyId) {
	MT.FlexNavigationBar.call(this, app, monkeyId);
	this.componentType = "FlexButtonBar";	
};

MT.FlexButtonBar.prototype = new MT.FlexNavigationBar;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexButtonBar} the upper-left-most visible FlexButtonBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexButtonBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexButtonBar(this, monkeyId);
};


//
// CLASS: FlexTitleWindow
//
/**
 * 
 * @class
 * @extends MT.FlexPanel
 * @param app The MT.Application containing this FlexTitleWindow
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexTitleWindow = function(app, monkeyId) {
	MT.FlexPanel.call(this, app, monkeyId);
	this.componentType = "FlexTitleWindow";	
};

MT.FlexTitleWindow.prototype = new MT.FlexPanel;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexTitleWindow} the upper-left-most visible FlexTitleWindow matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexTitleWindow = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexTitleWindow(this, monkeyId);
};


//
// CLASS: FlexButton
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexButton
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexButton = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexButton";	
};

MT.FlexButton.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexButton} the upper-left-most visible FlexButton matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexButton = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexButton(this, monkeyId);
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexButton.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexPopUpButton
//
/**
 * 
 * @class
 * @extends MT.FlexButton
 * @param app The MT.Application containing this FlexPopUpButton
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexPopUpButton = function(app, monkeyId) {
	MT.FlexButton.call(this, app, monkeyId);
	this.componentType = "FlexPopUpButton";	
};

MT.FlexPopUpButton.prototype = new MT.FlexButton;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexPopUpButton} the upper-left-most visible FlexPopUpButton matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexPopUpButton = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexPopUpButton(this, monkeyId);
};

//
// METHOD: close
//
/**
 * Close
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexPopUpButton.prototype.close = function(triggerEvent) {
	return this.app.play(this, "close", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: open
//
/**
 * Open
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexPopUpButton.prototype.open = function(triggerEvent) {
	return this.app.play(this, "open", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkTextBase
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this SparkTextBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkTextBase = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "SparkTextBase";	
};

MT.SparkTextBase.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkTextBase} the upper-left-most visible SparkTextBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkTextBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkTextBase(this, monkeyId);
};


//
// CLASS: SparkRange
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableComponent
 * @param app The MT.Application containing this SparkRange
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkRange = function(app, monkeyId) {
	MT.SparkSkinnableComponent.call(this, app, monkeyId);
	this.componentType = "SparkRange";	
};

MT.SparkRange.prototype = new MT.SparkSkinnableComponent;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkRange} the upper-left-most visible SparkRange matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkRange = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkRange(this, monkeyId);
};


//
// CLASS: SparkSpinner
//
/**
 * 
 * @class
 * @extends MT.SparkRange
 * @param app The MT.Application containing this SparkSpinner
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkSpinner = function(app, monkeyId) {
	MT.SparkRange.call(this, app, monkeyId);
	this.componentType = "SparkSpinner";	
};

MT.SparkSpinner.prototype = new MT.SparkRange;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkSpinner} the upper-left-most visible SparkSpinner matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkSpinner = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkSpinner(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {Number} value Number value

 * @returns void 
 */
MT.SparkSpinner.prototype.change = function(value) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkGroupBase
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this SparkGroupBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkGroupBase = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "SparkGroupBase";	
};

MT.SparkGroupBase.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkGroupBase} the upper-left-most visible SparkGroupBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkGroupBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkGroupBase(this, monkeyId);
};


//
// CLASS: SparkGroup
//
/**
 * 
 * @class
 * @extends MT.SparkGroupBase
 * @param app The MT.Application containing this SparkGroup
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkGroup = function(app, monkeyId) {
	MT.SparkGroupBase.call(this, app, monkeyId);
	this.componentType = "SparkGroup";	
};

MT.SparkGroup.prototype = new MT.SparkGroupBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkGroup} the upper-left-most visible SparkGroup matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkGroup = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkGroup(this, monkeyId);
};

//
// METHOD: dragcancel
//
/**
 * DragCancel
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.SparkGroup.prototype.dragcancel = function(keyModifier) {
	return this.app.play(this, "dragcancel", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragdrop
//
/**
 * DragDrop
 * @param  {String} action String action
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.SparkGroup.prototype.dragdrop = function(action, draggedItem, keyModifier) {
	return this.app.play(this, "dragdrop", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragenterwithpos
//
/**
 * DragEnterWithPos
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier
 * @param  {int} localX int localX
 * @param  {int} localY int localY
 * @param  {String} action String action

 * @returns void 
 */
MT.SparkGroup.prototype.dragenterwithpos = function(draggedItem, keyModifier, localX, localY, action) {
	return this.app.play(this, "dragenterwithpos", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragstartwithpos
//
/**
 * DragStartWithPos
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier
 * @param  {int} localX int localX
 * @param  {int} localY int localY
 * @param  {String} action String action

 * @returns void 
 */
MT.SparkGroup.prototype.dragstartwithpos = function(draggedItem, keyModifier, localX, localY, action) {
	return this.app.play(this, "dragstartwithpos", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragdropwithpos
//
/**
 * DragDropWithPos
 * @param  {String} action String action
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier
 * @param  {int} localX int localX
 * @param  {int} localY int localY
 * @param  {String} action String action

 * @returns void 
 */
MT.SparkGroup.prototype.dragdropwithpos = function(action, draggedItem, keyModifier, localX, localY) {
	return this.app.play(this, "dragdropwithpos", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragstart
//
/**
 * DragStart
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.SparkGroup.prototype.dragstart = function(draggedItem, keyModifier) {
	return this.app.play(this, "dragstart", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragenter
//
/**
 * DragEnter
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.SparkGroup.prototype.dragenter = function(draggedItem, keyModifier) {
	return this.app.play(this, "dragenter", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexBarSeries
//
/**
 * 
 * @class
 * @extends MT.FlexChartSeries
 * @param app The MT.Application containing this FlexBarSeries
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexBarSeries = function(app, monkeyId) {
	MT.FlexChartSeries.call(this, app, monkeyId);
	this.componentType = "FlexBarSeries";	
};

MT.FlexBarSeries.prototype = new MT.FlexChartSeries;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexBarSeries} the upper-left-most visible FlexBarSeries matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexBarSeries = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexBarSeries(this, monkeyId);
};


//
// CLASS: IndexedSelector
//
/**
 * A component that provides for selection of an item from a list of items. Item selection isrecorded and played back with an index indicating the selected item.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this IndexedSelector
 * @param monkeyId A monkeyId or ordinal
 */
MT.IndexedSelector = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "IndexedSelector";	
};

MT.IndexedSelector.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.IndexedSelector} the upper-left-most visible IndexedSelector matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.indexedSelector = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.IndexedSelector(this, monkeyId);
};

//
// METHOD: selectIndex
//
/**
 * Selects an item by index.
 * @param  {int} itemNumber the index of the item to select.

 * @returns void 
 */
MT.IndexedSelector.prototype.selectIndex = function(itemNumber) {
	return this.app.play(this, "selectIndex", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: longSelectIndex
//
/**
 * Long press an item by index.
 * @param  {int} itemNumber the index of the item to long press.

 * @returns void 
 */
MT.IndexedSelector.prototype.longSelectIndex = function(itemNumber) {
	return this.app.play(this, "longSelectIndex", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: ItemSelector
//
/**
 * A component that provides for selecting a text item from a list of items. iOS: UIPickerView. Android: UISpinner. Web: Select tag.
 * @class
 * @extends MT.IndexedSelector
 * @param app The MT.Application containing this ItemSelector
 * @param monkeyId A monkeyId or ordinal
 */
MT.ItemSelector = function(app, monkeyId) {
	MT.IndexedSelector.call(this, app, monkeyId);
	this.componentType = "ItemSelector";	
};

MT.ItemSelector.prototype = new MT.IndexedSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.ItemSelector} the upper-left-most visible ItemSelector matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.itemSelector = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.ItemSelector(this, monkeyId);
};

//
// METHOD: select
//
/**
 * Select an item by value.
 * @param  {String} value the value of the item to select.

 * @returns void 
 */
MT.ItemSelector.prototype.select = function(value) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: ButtonSelector
//
/**
 * A group of radio (mutually exclusive) buttons. iOS: UISegmentedControl. Android: RadioGroup. Web:A set of Input tags with type='radio' and name='group'.
 * @class
 * @extends MT.ItemSelector
 * @param app The MT.Application containing this ButtonSelector
 * @param monkeyId A monkeyId or ordinal
 */
MT.ButtonSelector = function(app, monkeyId) {
	MT.ItemSelector.call(this, app, monkeyId);
	this.componentType = "ButtonSelector";	
};

MT.ButtonSelector.prototype = new MT.ItemSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.ButtonSelector} the upper-left-most visible ButtonSelector matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.buttonSelector = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.ButtonSelector(this, monkeyId);
};


//
// CLASS: RadioButtons
//
/**
 * A RadioButton group. An alias for ButtonSelector.
 * @class
 * @extends MT.ButtonSelector
 * @param app The MT.Application containing this RadioButtons
 * @param monkeyId A monkeyId or ordinal
 */
MT.RadioButtons = function(app, monkeyId) {
	MT.ButtonSelector.call(this, app, monkeyId);
	this.componentType = "RadioButtons";	
};

MT.RadioButtons.prototype = new MT.ButtonSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.RadioButtons} the upper-left-most visible RadioButtons matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.radioButtons = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.RadioButtons(this, monkeyId);
};


//
// CLASS: FlexLinkBar
//
/**
 * 
 * @class
 * @extends MT.FlexNavigationBar
 * @param app The MT.Application containing this FlexLinkBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexLinkBar = function(app, monkeyId) {
	MT.FlexNavigationBar.call(this, app, monkeyId);
	this.componentType = "FlexLinkBar";	
};

MT.FlexLinkBar.prototype = new MT.FlexNavigationBar;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexLinkBar} the upper-left-most visible FlexLinkBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexLinkBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexLinkBar(this, monkeyId);
};


//
// CLASS: FlexLoader
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexLoader
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexLoader = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexLoader";	
};

MT.FlexLoader.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexLoader} the upper-left-most visible FlexLoader matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexLoader = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexLoader(this, monkeyId);
};


//
// CLASS: FlexCheckBox
//
/**
 * 
 * @class
 * @extends MT.FlexButton
 * @param app The MT.Application containing this FlexCheckBox
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexCheckBox = function(app, monkeyId) {
	MT.FlexButton.call(this, app, monkeyId);
	this.componentType = "FlexCheckBox";	
};

MT.FlexCheckBox.prototype = new MT.FlexButton;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexCheckBox} the upper-left-most visible FlexCheckBox matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexCheckBox = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexCheckBox(this, monkeyId);
};


//
// CLASS: SparkTrackBase
//
/**
 * 
 * @class
 * @extends MT.SparkRange
 * @param app The MT.Application containing this SparkTrackBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkTrackBase = function(app, monkeyId) {
	MT.SparkRange.call(this, app, monkeyId);
	this.componentType = "SparkTrackBase";	
};

MT.SparkTrackBase.prototype = new MT.SparkRange;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkTrackBase} the upper-left-most visible SparkTrackBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkTrackBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkTrackBase(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {Number} value Number value

 * @returns void 
 */
MT.SparkTrackBase.prototype.change = function(value) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexDateChooser
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexDateChooser
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexDateChooser = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexDateChooser";	
};

MT.FlexDateChooser.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexDateChooser} the upper-left-most visible FlexDateChooser matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexDateChooser = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexDateChooser(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {Date} newDate Date newDate

 * @returns void 
 */
MT.FlexDateChooser.prototype.change = function(newDate) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {String} detail String detail

 * @returns void 
 */
MT.FlexDateChooser.prototype.scroll = function(detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexDateChooser.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkSkinnableContainer
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableContainerBase
 * @param app The MT.Application containing this SparkSkinnableContainer
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkSkinnableContainer = function(app, monkeyId) {
	MT.SparkSkinnableContainerBase.call(this, app, monkeyId);
	this.componentType = "SparkSkinnableContainer";	
};

MT.SparkSkinnableContainer.prototype = new MT.SparkSkinnableContainerBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkSkinnableContainer} the upper-left-most visible SparkSkinnableContainer matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkSkinnableContainer = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkSkinnableContainer(this, monkeyId);
};

//
// METHOD: dragcomplete
//
/**
 * DragComplete
 * @param  {int} keyModifier int keyModifier

 * @returns void 
 */
MT.SparkSkinnableContainer.prototype.dragcomplete = function(keyModifier) {
	return this.app.play(this, "dragcomplete", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragdrop
//
/**
 * DragDrop
 * @param  {String} action String action
 * @param  {String} draggedItem String draggedItem
 * @param  {int} keyModifier int keyModifier

 * @returns void 
 */
MT.SparkSkinnableContainer.prototype.dragdrop = function(action, draggedItem, keyModifier) {
	return this.app.play(this, "dragdrop", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragstart
//
/**
 * DragStart
 * @param  {String} draggedItem String draggedItem
 * @param  {int} keyModifier int keyModifier

 * @returns void 
 */
MT.SparkSkinnableContainer.prototype.dragstart = function(draggedItem, keyModifier) {
	return this.app.play(this, "dragstart", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: mousescroll
//
/**
 * MouseScroll
 * @param  {int} delta int delta

 * @returns void 
 */
MT.SparkSkinnableContainer.prototype.mousescroll = function(delta) {
	return this.app.play(this, "mousescroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkPanel
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableContainer
 * @param app The MT.Application containing this SparkPanel
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkPanel = function(app, monkeyId) {
	MT.SparkSkinnableContainer.call(this, app, monkeyId);
	this.componentType = "SparkPanel";	
};

MT.SparkPanel.prototype = new MT.SparkSkinnableContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkPanel} the upper-left-most visible SparkPanel matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkPanel = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkPanel(this, monkeyId);
};


//
// CLASS: FlexDividedBox
//
/**
 * 
 * @class
 * @extends MT.FlexBox
 * @param app The MT.Application containing this FlexDividedBox
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexDividedBox = function(app, monkeyId) {
	MT.FlexBox.call(this, app, monkeyId);
	this.componentType = "FlexDividedBox";	
};

MT.FlexDividedBox.prototype = new MT.FlexBox;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexDividedBox} the upper-left-most visible FlexDividedBox matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexDividedBox = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexDividedBox(this, monkeyId);
};

//
// METHOD: dragged
//
/**
 * Dragged
 * @param  {int} dividerIndex int dividerIndex
 * @param  {Number} delta Number delta

 * @returns void 
 */
MT.FlexDividedBox.prototype.dragged = function(dividerIndex, delta) {
	return this.app.play(this, "dragged", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: pressed
//
/**
 * Pressed
 * @param  {int} dividerIndex int dividerIndex
 * @param  {Number} delta Number delta

 * @returns void 
 */
MT.FlexDividedBox.prototype.pressed = function(dividerIndex, delta) {
	return this.app.play(this, "pressed", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: released
//
/**
 * Released
 * @param  {int} dividerIndex int dividerIndex
 * @param  {Number} delta Number delta

 * @returns void 
 */
MT.FlexDividedBox.prototype.released = function(dividerIndex, delta) {
	return this.app.play(this, "released", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexImage
//
/**
 * 
 * @class
 * @extends MT.FlexLoader
 * @param app The MT.Application containing this FlexImage
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexImage = function(app, monkeyId) {
	MT.FlexLoader.call(this, app, monkeyId);
	this.componentType = "FlexImage";	
};

MT.FlexImage.prototype = new MT.FlexLoader;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexImage} the upper-left-most visible FlexImage matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexImage = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexImage(this, monkeyId);
};


//
// CLASS: Table
//
/**
 * A component that provides a tabular view of data. iOS: UITableView. Android: Table. Web: Table tag. For web tables, the section specifies the column.
 * @class
 * @extends MT.ItemSelector
 * @param app The MT.Application containing this Table
 * @param monkeyId A monkeyId or ordinal
 */
MT.Table = function(app, monkeyId) {
	MT.ItemSelector.call(this, app, monkeyId);
	this.componentType = "Table";	
};

MT.Table.prototype = new MT.ItemSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Table} the upper-left-most visible Table matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.table = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Table(this, monkeyId);
};

//
// METHOD: selectRow
//
/**
 * Select a row.
 * @param  {int} row the row to select
 * @param  {int} section the section containing the row, defaults to section #1. (Ignored on Android)

 * @returns void 
 */
MT.Table.prototype.selectRow = function(row, section) {
	return this.app.play(this, "selectRow", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selectIndicator
//
/**
 * Select the indicator (the icon on the right). Android: Ignored.
 * @param  {int} row the row to select
 * @param  {int} section the section containing the row, defaults to section #1.

 * @returns void 
 */
MT.Table.prototype.selectIndicator = function(row, section) {
	return this.app.play(this, "selectIndicator", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scrollToRow
//
/**
 * Scroll to a row by row number.
 * @param  {int} row the row to scroll to
 * @param  {int} section the section containing the row, defaults to section #1. (Ignored on Android)

 * @returns void 
 */
MT.Table.prototype.scrollToRow = function(row, section) {
	return this.app.play(this, "scrollToRow", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scrollToRow
//
/**
 * Scroll to a row by value.
 * @param  {String} value the value of the row to scroll to.

 * @returns void 
 */
MT.Table.prototype.scrollToRow = function(value) {
	return this.app.play(this, "scrollToRow", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: setEditing
//
/**
 * Enable/disable table editing. iOS: Enabled editing mode for table. Android: ignored.
 * @param  {boolean} enabled if true, enable editing, else disable editing.

 * @returns void 
 */
MT.Table.prototype.setEditing = function(enabled) {
	return this.app.play(this, "setEditing", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: insert
//
/**
 * Insert a row into the table. iOS: Inserts a row. Android: Ignored.
 * @param  {int} row the index of the row after which to insert a new row.
 * @param  {int} section the section containing the row, defaults to section #1.

 * @returns void 
 */
MT.Table.prototype.insert = function(row, section) {
	return this.app.play(this, "insert", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: remove
//
/**
 * Remove a row from the table. iOS: Deletes the row. Android: Ignored.
 * @param  {int} row the index of the row to be removed.
 * @param  {int} section the section containing the row, defaults to section #1.

 * @returns void 
 */
MT.Table.prototype.remove = function(row, section) {
	return this.app.play(this, "remove", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: move
//
/**
 * Move a row. iOS: Moves a row. Android: Ignored.
 * @param  {int} from the index of the row to be moved.
 * @param  {int} to the destination row for the move.

 * @returns void 
 */
MT.Table.prototype.move = function(from, to) {
	return this.app.play(this, "move", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: NumericSelector
//
/**
 * A component that provides for selecting a number for a set of numbers.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this NumericSelector
 * @param monkeyId A monkeyId or ordinal
 */
MT.NumericSelector = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "NumericSelector";	
};

MT.NumericSelector.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.NumericSelector} the upper-left-most visible NumericSelector matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.numericSelector = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.NumericSelector(this, monkeyId);
};

//
// METHOD: select
//
/**
 * Select a numeric value
 * @param  {float} value the value to select

 * @returns void 
 */
MT.NumericSelector.prototype.select = function(value) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Stepper
//
/**
 * A stepper control. iOS: UIStepper. Android: ignored.
 * @class
 * @extends MT.NumericSelector
 * @param app The MT.Application containing this Stepper
 * @param monkeyId A monkeyId or ordinal
 */
MT.Stepper = function(app, monkeyId) {
	MT.NumericSelector.call(this, app, monkeyId);
	this.componentType = "Stepper";	
};

MT.Stepper.prototype = new MT.NumericSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Stepper} the upper-left-most visible Stepper matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.stepper = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Stepper(this, monkeyId);
};

//
// METHOD: increment
//
/**
 * Increase the value by the stepsize. Ignored if at max.

 * @returns void 
 */
MT.Stepper.prototype.increment = function() {
	return this.app.play(this, "increment", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: decrement
//
/**
 * Decrease the value by the stepsize. Ignore if at min.

 * @returns void 
 */
MT.Stepper.prototype.decrement = function() {
	return this.app.play(this, "decrement", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Image
//
/**
 * An image. iOS: UIImage, Android: ImageView.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this Image
 * @param monkeyId A monkeyId or ordinal
 */
MT.Image = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "Image";	
};

MT.Image.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Image} the upper-left-most visible Image matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.image = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Image(this, monkeyId);
};


//
// CLASS: FlexPlotSeries
//
/**
 * 
 * @class
 * @extends MT.FlexChartSeries
 * @param app The MT.Application containing this FlexPlotSeries
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexPlotSeries = function(app, monkeyId) {
	MT.FlexChartSeries.call(this, app, monkeyId);
	this.componentType = "FlexPlotSeries";	
};

MT.FlexPlotSeries.prototype = new MT.FlexChartSeries;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexPlotSeries} the upper-left-most visible FlexPlotSeries matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexPlotSeries = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexPlotSeries(this, monkeyId);
};


//
// CLASS: FlexMenuBar
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexMenuBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexMenuBar = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexMenuBar";	
};

MT.FlexMenuBar.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexMenuBar} the upper-left-most visible FlexMenuBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexMenuBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexMenuBar(this, monkeyId);
};

//
// METHOD: hide
//
/**
 * Hide

 * @returns void 
 */
MT.FlexMenuBar.prototype.hide = function() {
	return this.app.play(this, "hide", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: show
//
/**
 * Show
 * @param  {String} itemRenderer String itemRenderer

 * @returns void 
 */
MT.FlexMenuBar.prototype.show = function(itemRenderer) {
	return this.app.play(this, "show", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexMenuBar.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Label
//
/**
 * A read-only text field. iOS: UILabel. Android: An uneditable TextView.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this Label
 * @param monkeyId A monkeyId or ordinal
 */
MT.Label = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "Label";	
};

MT.Label.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Label} the upper-left-most visible Label matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.label = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Label(this, monkeyId);
};


//
// CLASS: Input
//
/**
 * A single-line input field. iOS: UITextField. Android: single-line editable TextView. Web: Inputtag with type='text'. If the input as a hint/prompt, it is used as the monkeyId.
 * @class
 * @extends MT.Label
 * @param app The MT.Application containing this Input
 * @param monkeyId A monkeyId or ordinal
 */
MT.Input = function(app, monkeyId) {
	MT.Label.call(this, app, monkeyId);
	this.componentType = "Input";	
};

MT.Input.prototype = new MT.Label;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Input} the upper-left-most visible Input matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.input = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Input(this, monkeyId);
};

//
// METHOD: enterText
//
/**
 * Enter text into the input field.
 * @param  {String} text the text to enter
 * @param  {String} hitEnter if 'enter', hit the Enter/Return/Done/Next key after entering the text.

 * @returns void 
 */
MT.Input.prototype.enterText = function(text, hitEnter) {
	return this.app.play(this, "enterText", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: clear
//
/**
 * Clear text from the input field.

 * @returns void 
 */
MT.Input.prototype.clear = function() {
	return this.app.play(this, "clear", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexVideoDisplay
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexVideoDisplay
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexVideoDisplay = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexVideoDisplay";	
};

MT.FlexVideoDisplay.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexVideoDisplay} the upper-left-most visible FlexVideoDisplay matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexVideoDisplay = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexVideoDisplay(this, monkeyId);
};


//
// CLASS: FlexScrollBar
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexScrollBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexScrollBar = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexScrollBar";	
};

MT.FlexScrollBar.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexScrollBar} the upper-left-most visible FlexScrollBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexScrollBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexScrollBar(this, monkeyId);
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {int} position int position
 * @param  {String} direction String direction
 * @param  {String} detail String detail

 * @returns void 
 */
MT.FlexScrollBar.prototype.scroll = function(position, direction, detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexDateField
//
/**
 * 
 * @class
 * @extends MT.FlexComboBase
 * @param app The MT.Application containing this FlexDateField
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexDateField = function(app, monkeyId) {
	MT.FlexComboBase.call(this, app, monkeyId);
	this.componentType = "FlexDateField";	
};

MT.FlexDateField.prototype = new MT.FlexComboBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexDateField} the upper-left-most visible FlexDateField matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexDateField = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexDateField(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {Date} newDate Date newDate

 * @returns void 
 */
MT.FlexDateField.prototype.change = function(newDate) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {String} detail String detail

 * @returns void 
 */
MT.FlexDateField.prototype.scroll = function(detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexDateField.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexTextArea
//
/**
 * 
 * @class
 * @extends MT.FlexScrollBase
 * @param app The MT.Application containing this FlexTextArea
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexTextArea = function(app, monkeyId) {
	MT.FlexScrollBase.call(this, app, monkeyId);
	this.componentType = "FlexTextArea";	
};

MT.FlexTextArea.prototype = new MT.FlexScrollBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexTextArea} the upper-left-most visible FlexTextArea matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexTextArea = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexTextArea(this, monkeyId);
};

//
// METHOD: input
//
/**
 * Input
 * @param  {String} text String text

 * @returns void 
 */
MT.FlexTextArea.prototype.input = function(text) {
	return this.app.play(this, "input", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {int} position int position
 * @param  {String} direction String direction
 * @param  {String} detail String detail

 * @returns void 
 */
MT.FlexTextArea.prototype.scroll = function(position, direction, detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selecttext
//
/**
 * SelectText
 * @param  {int} beginIndex int beginIndex
 * @param  {int} endIndex int endIndex

 * @returns void 
 */
MT.FlexTextArea.prototype.selecttext = function(beginIndex, endIndex) {
	return this.app.play(this, "selecttext", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexTextArea.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexColumnSeries
//
/**
 * 
 * @class
 * @extends MT.FlexChartSeries
 * @param app The MT.Application containing this FlexColumnSeries
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexColumnSeries = function(app, monkeyId) {
	MT.FlexChartSeries.call(this, app, monkeyId);
	this.componentType = "FlexColumnSeries";	
};

MT.FlexColumnSeries.prototype = new MT.FlexChartSeries;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexColumnSeries} the upper-left-most visible FlexColumnSeries matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexColumnSeries = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexColumnSeries(this, monkeyId);
};


//
// CLASS: SparkNumericStepper
//
/**
 * 
 * @class
 * @extends MT.SparkSpinner
 * @param app The MT.Application containing this SparkNumericStepper
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkNumericStepper = function(app, monkeyId) {
	MT.SparkSpinner.call(this, app, monkeyId);
	this.componentType = "SparkNumericStepper";	
};

MT.SparkNumericStepper.prototype = new MT.SparkSpinner;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkNumericStepper} the upper-left-most visible SparkNumericStepper matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkNumericStepper = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkNumericStepper(this, monkeyId);
};

//
// METHOD: input
//
/**
 * Input
 * @param  {String} text String text

 * @returns void 
 */
MT.SparkNumericStepper.prototype.input = function(text) {
	return this.app.play(this, "input", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selecttext
//
/**
 * SelectText
 * @param  {int} beginIndex int beginIndex
 * @param  {int} endIndex int endIndex

 * @returns void 
 */
MT.SparkNumericStepper.prototype.selecttext = function(beginIndex, endIndex) {
	return this.app.play(this, "selecttext", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {int} keyModifier int keyModifier

 * @returns void 
 */
MT.SparkNumericStepper.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Link
//
/**
 * A web hypertext link.
 * @class
 * @extends MT.Label
 * @param app The MT.Application containing this Link
 * @param monkeyId A monkeyId or ordinal
 */
MT.Link = function(app, monkeyId) {
	MT.Label.call(this, app, monkeyId);
	this.componentType = "Link";	
};

MT.Link.prototype = new MT.Label;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Link} the upper-left-most visible Link matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.link = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Link(this, monkeyId);
};


//
// CLASS: FlexListLabel
//
/**
 * 
 * @class
 * @extends MT.FlexDisplayObject
 * @param app The MT.Application containing this FlexListLabel
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexListLabel = function(app, monkeyId) {
	MT.FlexDisplayObject.call(this, app, monkeyId);
	this.componentType = "FlexListLabel";	
};

MT.FlexListLabel.prototype = new MT.FlexDisplayObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexListLabel} the upper-left-most visible FlexListLabel matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexListLabel = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexListLabel(this, monkeyId);
};


//
// CLASS: RatingBar
//
/**
 * A component that captures a rating (eg, with stars). iOS: Slider. Android: RatingBar.
 * @class
 * @extends MT.NumericSelector
 * @param app The MT.Application containing this RatingBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.RatingBar = function(app, monkeyId) {
	MT.NumericSelector.call(this, app, monkeyId);
	this.componentType = "RatingBar";	
};

MT.RatingBar.prototype = new MT.NumericSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.RatingBar} the upper-left-most visible RatingBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.ratingBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.RatingBar(this, monkeyId);
};


//
// CLASS: FlexColorPicker
//
/**
 * 
 * @class
 * @extends MT.FlexComboBase
 * @param app The MT.Application containing this FlexColorPicker
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexColorPicker = function(app, monkeyId) {
	MT.FlexComboBase.call(this, app, monkeyId);
	this.componentType = "FlexColorPicker";	
};

MT.FlexColorPicker.prototype = new MT.FlexComboBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexColorPicker} the upper-left-most visible FlexColorPicker matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexColorPicker = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexColorPicker(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {String} color String color

 * @returns void 
 */
MT.FlexColorPicker.prototype.change = function(color) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: close
//
/**
 * Close
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexColorPicker.prototype.close = function(triggerEvent) {
	return this.app.play(this, "close", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: open
//
/**
 * Open
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexColorPicker.prototype.open = function(triggerEvent) {
	return this.app.play(this, "open", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexLineSeries
//
/**
 * 
 * @class
 * @extends MT.FlexChartSeries
 * @param app The MT.Application containing this FlexLineSeries
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexLineSeries = function(app, monkeyId) {
	MT.FlexChartSeries.call(this, app, monkeyId);
	this.componentType = "FlexLineSeries";	
};

MT.FlexLineSeries.prototype = new MT.FlexChartSeries;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexLineSeries} the upper-left-most visible FlexLineSeries matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexLineSeries = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexLineSeries(this, monkeyId);
};


//
// CLASS: SparkToggleButtonBase
//
/**
 * 
 * @class
 * @extends MT.SparkButtonBase
 * @param app The MT.Application containing this SparkToggleButtonBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkToggleButtonBase = function(app, monkeyId) {
	MT.SparkButtonBase.call(this, app, monkeyId);
	this.componentType = "SparkToggleButtonBase";	
};

MT.SparkToggleButtonBase.prototype = new MT.SparkButtonBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkToggleButtonBase} the upper-left-most visible SparkToggleButtonBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkToggleButtonBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkToggleButtonBase(this, monkeyId);
};


//
// CLASS: SparkCheckBox
//
/**
 * 
 * @class
 * @extends MT.SparkToggleButtonBase
 * @param app The MT.Application containing this SparkCheckBox
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkCheckBox = function(app, monkeyId) {
	MT.SparkToggleButtonBase.call(this, app, monkeyId);
	this.componentType = "SparkCheckBox";	
};

MT.SparkCheckBox.prototype = new MT.SparkToggleButtonBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkCheckBox} the upper-left-most visible SparkCheckBox matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkCheckBox = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkCheckBox(this, monkeyId);
};


//
// CLASS: FlexRepeater
//
/**
 * 
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this FlexRepeater
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexRepeater = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "FlexRepeater";	
};

MT.FlexRepeater.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexRepeater} the upper-left-most visible FlexRepeater matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexRepeater = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexRepeater(this, monkeyId);
};


//
// CLASS: SparkSkinnableTextBase
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableComponent
 * @param app The MT.Application containing this SparkSkinnableTextBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkSkinnableTextBase = function(app, monkeyId) {
	MT.SparkSkinnableComponent.call(this, app, monkeyId);
	this.componentType = "SparkSkinnableTextBase";	
};

MT.SparkSkinnableTextBase.prototype = new MT.SparkSkinnableComponent;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkSkinnableTextBase} the upper-left-most visible SparkSkinnableTextBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkSkinnableTextBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkSkinnableTextBase(this, monkeyId);
};

//
// METHOD: input
//
/**
 * Input
 * @param  {String} text String text

 * @returns void 
 */
MT.SparkSkinnableTextBase.prototype.input = function(text) {
	return this.app.play(this, "input", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {int} position int position
 * @param  {int} direction int direction
 * @param  {String} detail String detail

 * @returns void 
 */
MT.SparkSkinnableTextBase.prototype.scroll = function(position, direction, detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selecttext
//
/**
 * SelectText
 * @param  {int} beginIndex int beginIndex
 * @param  {int} endIndex int endIndex

 * @returns void 
 */
MT.SparkSkinnableTextBase.prototype.selecttext = function(beginIndex, endIndex) {
	return this.app.play(this, "selecttext", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {int} keyModifier int keyModifier

 * @returns void 
 */
MT.SparkSkinnableTextBase.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkTextInput
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableTextBase
 * @param app The MT.Application containing this SparkTextInput
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkTextInput = function(app, monkeyId) {
	MT.SparkSkinnableTextBase.call(this, app, monkeyId);
	this.componentType = "SparkTextInput";	
};

MT.SparkTextInput.prototype = new MT.SparkSkinnableTextBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkTextInput} the upper-left-most visible SparkTextInput matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkTextInput = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkTextInput(this, monkeyId);
};


//
// CLASS: FlexChart
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexChart
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexChart = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexChart";	
};

MT.FlexChart.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexChart} the upper-left-most visible FlexChart matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexChart = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexChart(this, monkeyId);
};


//
// CLASS: FlexCartesianChart
//
/**
 * 
 * @class
 * @extends MT.FlexChart
 * @param app The MT.Application containing this FlexCartesianChart
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexCartesianChart = function(app, monkeyId) {
	MT.FlexChart.call(this, app, monkeyId);
	this.componentType = "FlexCartesianChart";	
};

MT.FlexCartesianChart.prototype = new MT.FlexChart;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexCartesianChart} the upper-left-most visible FlexCartesianChart matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexCartesianChart = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexCartesianChart(this, monkeyId);
};


//
// CLASS: FlexColumnChart
//
/**
 * 
 * @class
 * @extends MT.FlexCartesianChart
 * @param app The MT.Application containing this FlexColumnChart
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexColumnChart = function(app, monkeyId) {
	MT.FlexCartesianChart.call(this, app, monkeyId);
	this.componentType = "FlexColumnChart";	
};

MT.FlexColumnChart.prototype = new MT.FlexCartesianChart;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexColumnChart} the upper-left-most visible FlexColumnChart matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexColumnChart = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexColumnChart(this, monkeyId);
};


//
// CLASS: FlexProgressBar
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexProgressBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexProgressBar = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexProgressBar";	
};

MT.FlexProgressBar.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexProgressBar} the upper-left-most visible FlexProgressBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexProgressBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexProgressBar(this, monkeyId);
};


//
// CLASS: Menu
//
/**
 * A menu UI component. iOS: TabBar. Android: Menu
 * @class
 * @extends MT.ItemSelector
 * @param app The MT.Application containing this Menu
 * @param monkeyId A monkeyId or ordinal
 */
MT.Menu = function(app, monkeyId) {
	MT.ItemSelector.call(this, app, monkeyId);
	this.componentType = "Menu";	
};

MT.Menu.prototype = new MT.ItemSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Menu} the upper-left-most visible Menu matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.menu = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Menu(this, monkeyId);
};


//
// CLASS: FlexSlider
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexSlider
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexSlider = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexSlider";	
};

MT.FlexSlider.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexSlider} the upper-left-most visible FlexSlider matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexSlider = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexSlider(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {Number} value Number value
 * @param  {int} thumbIndex int thumbIndex
 * @param  {String} clickTarget String clickTarget
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyCode String keyCode

 * @returns void 
 */
MT.FlexSlider.prototype.change = function(value, thumbIndex, clickTarget, triggerEvent, keyCode) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Button
//
/**
 * A Button. iOS: UIButton. Android: Button. Web: Button tag, or Input tag with type='submit' or type='reset'. Ifthe button has a label, it is used as the monkeyId.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this Button
 * @param monkeyId A monkeyId or ordinal
 */
MT.Button = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "Button";	
};

MT.Button.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Button} the upper-left-most visible Button matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.button = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Button(this, monkeyId);
};


//
// CLASS: FlexAlert
//
/**
 * 
 * @class
 * @extends MT.FlexPanel
 * @param app The MT.Application containing this FlexAlert
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexAlert = function(app, monkeyId) {
	MT.FlexPanel.call(this, app, monkeyId);
	this.componentType = "FlexAlert";	
};

MT.FlexAlert.prototype = new MT.FlexPanel;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexAlert} the upper-left-most visible FlexAlert matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexAlert = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexAlert(this, monkeyId);
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAlert.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexPieChart
//
/**
 * 
 * @class
 * @extends MT.FlexChart
 * @param app The MT.Application containing this FlexPieChart
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexPieChart = function(app, monkeyId) {
	MT.FlexChart.call(this, app, monkeyId);
	this.componentType = "FlexPieChart";	
};

MT.FlexPieChart.prototype = new MT.FlexChart;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexPieChart} the upper-left-most visible FlexPieChart matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexPieChart = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexPieChart(this, monkeyId);
};


//
// CLASS: FlexNumericStepper
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexNumericStepper
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexNumericStepper = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexNumericStepper";	
};

MT.FlexNumericStepper.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexNumericStepper} the upper-left-most visible FlexNumericStepper matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexNumericStepper = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexNumericStepper(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {Number} value Number value

 * @returns void 
 */
MT.FlexNumericStepper.prototype.change = function(value) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: input
//
/**
 * Input
 * @param  {String} text String text

 * @returns void 
 */
MT.FlexNumericStepper.prototype.input = function(text) {
	return this.app.play(this, "input", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selecttext
//
/**
 * SelectText
 * @param  {int} beginIndex int beginIndex
 * @param  {int} endIndex int endIndex

 * @returns void 
 */
MT.FlexNumericStepper.prototype.selecttext = function(beginIndex, endIndex) {
	return this.app.play(this, "selecttext", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexNumericStepper.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexRadioButton
//
/**
 * 
 * @class
 * @extends MT.FlexButton
 * @param app The MT.Application containing this FlexRadioButton
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexRadioButton = function(app, monkeyId) {
	MT.FlexButton.call(this, app, monkeyId);
	this.componentType = "FlexRadioButton";	
};

MT.FlexRadioButton.prototype = new MT.FlexButton;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexRadioButton} the upper-left-most visible FlexRadioButton matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexRadioButton = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexRadioButton(this, monkeyId);
};


//
// CLASS: FlexAreaSeries
//
/**
 * 
 * @class
 * @extends MT.FlexChartSeries
 * @param app The MT.Application containing this FlexAreaSeries
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexAreaSeries = function(app, monkeyId) {
	MT.FlexChartSeries.call(this, app, monkeyId);
	this.componentType = "FlexAreaSeries";	
};

MT.FlexAreaSeries.prototype = new MT.FlexChartSeries;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexAreaSeries} the upper-left-most visible FlexAreaSeries matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexAreaSeries = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexAreaSeries(this, monkeyId);
};


//
// CLASS: SparkList
//
/**
 * 
 * @class
 * @extends MT.SparkListBase
 * @param app The MT.Application containing this SparkList
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkList = function(app, monkeyId) {
	MT.SparkListBase.call(this, app, monkeyId);
	this.componentType = "SparkList";	
};

MT.SparkList.prototype = new MT.SparkListBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkList} the upper-left-most visible SparkList matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkList = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkList(this, monkeyId);
};


//
// CLASS: SparkDropDownListBase
//
/**
 * 
 * @class
 * @extends MT.SparkList
 * @param app The MT.Application containing this SparkDropDownListBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkDropDownListBase = function(app, monkeyId) {
	MT.SparkList.call(this, app, monkeyId);
	this.componentType = "SparkDropDownListBase";	
};

MT.SparkDropDownListBase.prototype = new MT.SparkList;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkDropDownListBase} the upper-left-most visible SparkDropDownListBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkDropDownListBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkDropDownListBase(this, monkeyId);
};

//
// METHOD: close
//
/**
 * Close
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.SparkDropDownListBase.prototype.close = function(triggerEvent) {
	return this.app.play(this, "close", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: open
//
/**
 * Open
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.SparkDropDownListBase.prototype.open = function(triggerEvent) {
	return this.app.play(this, "open", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: VideoPlayer
//
/**
 * A component that displays videos. iOS: MPMoviePlayerController. Android: VideoView.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this VideoPlayer
 * @param monkeyId A monkeyId or ordinal
 */
MT.VideoPlayer = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "VideoPlayer";	
};

MT.VideoPlayer.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.VideoPlayer} the upper-left-most visible VideoPlayer matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.videoPlayer = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.VideoPlayer(this, monkeyId);
};

//
// METHOD: play
//
/**
 * Play the video from the current playback point.

 * @returns void 
 */
MT.VideoPlayer.prototype.play = function() {
	return this.app.play(this, "play", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: pause
//
/**
 * Stop the video at the current playback point.

 * @returns void 
 */
MT.VideoPlayer.prototype.pause = function() {
	return this.app.play(this, "pause", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: stop
//
/**
 * Stop the video and set playback to the starting point.

 * @returns void 
 */
MT.VideoPlayer.prototype.stop = function() {
	return this.app.play(this, "stop", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexApplication
//
/**
 * 
 * @class
 * @extends MT.FlexBox
 * @param app The MT.Application containing this FlexApplication
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexApplication = function(app, monkeyId) {
	MT.FlexBox.call(this, app, monkeyId);
	this.componentType = "FlexApplication";	
};

MT.FlexApplication.prototype = new MT.FlexBox;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexApplication} the upper-left-most visible FlexApplication matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexApplication = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexApplication(this, monkeyId);
};


//
// CLASS: ToolBar
//
/**
 * A group of tool buttons. iOS: UIToolBar. Android: ActionBar.
 * @class
 * @extends MT.IndexedSelector
 * @param app The MT.Application containing this ToolBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.ToolBar = function(app, monkeyId) {
	MT.IndexedSelector.call(this, app, monkeyId);
	this.componentType = "ToolBar";	
};

MT.ToolBar.prototype = new MT.IndexedSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.ToolBar} the upper-left-most visible ToolBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.toolBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.ToolBar(this, monkeyId);
};


//
// CLASS: Scroller
//
/**
 * A component that provides a scrollable view of its contents. iOS: UIScrollView. Android:Scroller.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this Scroller
 * @param monkeyId A monkeyId or ordinal
 */
MT.Scroller = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "Scroller";	
};

MT.Scroller.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Scroller} the upper-left-most visible Scroller matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.scroller = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Scroller(this, monkeyId);
};

//
// METHOD: scroll
//
/**
 * Scroll to the specified coordinates.
 * @param  {int} x the x-coordinate (horizontal)
 * @param  {int} y the y-coordinate (vertical)

 * @returns void 
 */
MT.Scroller.prototype.scroll = function(x, y) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkComboBox
//
/**
 * 
 * @class
 * @extends MT.SparkDropDownListBase
 * @param app The MT.Application containing this SparkComboBox
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkComboBox = function(app, monkeyId) {
	MT.SparkDropDownListBase.call(this, app, monkeyId);
	this.componentType = "SparkComboBox";	
};

MT.SparkComboBox.prototype = new MT.SparkDropDownListBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkComboBox} the upper-left-most visible SparkComboBox matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkComboBox = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkComboBox(this, monkeyId);
};

//
// METHOD: input
//
/**
 * Input
 * @param  {String} text String text

 * @returns void 
 */
MT.SparkComboBox.prototype.input = function(text) {
	return this.app.play(this, "input", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {int} position int position
 * @param  {String} direction String direction
 * @param  {String} detail String detail

 * @returns void 
 */
MT.SparkComboBox.prototype.scroll = function(position, direction, detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: select
//
/**
 * Select
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.SparkComboBox.prototype.select = function(itemRenderer, triggerEvent, keyModifier) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selecttext
//
/**
 * SelectText
 * @param  {int} beginIndex int beginIndex
 * @param  {int} endIndex int endIndex

 * @returns void 
 */
MT.SparkComboBox.prototype.selecttext = function(beginIndex, endIndex) {
	return this.app.play(this, "selecttext", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.SparkComboBox.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexAccordion
//
/**
 * 
 * @class
 * @extends MT.FlexContainer
 * @param app The MT.Application containing this FlexAccordion
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexAccordion = function(app, monkeyId) {
	MT.FlexContainer.call(this, app, monkeyId);
	this.componentType = "FlexAccordion";	
};

MT.FlexAccordion.prototype = new MT.FlexContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexAccordion} the upper-left-most visible FlexAccordion matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexAccordion = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexAccordion(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {String} relatedObject String relatedObject

 * @returns void 
 */
MT.FlexAccordion.prototype.change = function(relatedObject) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAccordion.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexLinkButton
//
/**
 * 
 * @class
 * @extends MT.FlexButton
 * @param app The MT.Application containing this FlexLinkButton
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexLinkButton = function(app, monkeyId) {
	MT.FlexButton.call(this, app, monkeyId);
	this.componentType = "FlexLinkButton";	
};

MT.FlexLinkButton.prototype = new MT.FlexButton;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexLinkButton} the upper-left-most visible FlexLinkButton matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexLinkButton = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexLinkButton(this, monkeyId);
};


//
// CLASS: FlexPieSeries
//
/**
 * 
 * @class
 * @extends MT.FlexChartSeries
 * @param app The MT.Application containing this FlexPieSeries
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexPieSeries = function(app, monkeyId) {
	MT.FlexChartSeries.call(this, app, monkeyId);
	this.componentType = "FlexPieSeries";	
};

MT.FlexPieSeries.prototype = new MT.FlexChartSeries;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexPieSeries} the upper-left-most visible FlexPieSeries matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexPieSeries = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexPieSeries(this, monkeyId);
};


//
// CLASS: TabBar
//
/**
 * A TabBar. iOS: UITabBar. Android: TabHost. On Android, tabs are selected by 'tag'.
 * @class
 * @extends MT.ItemSelector
 * @param app The MT.Application containing this TabBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.TabBar = function(app, monkeyId) {
	MT.ItemSelector.call(this, app, monkeyId);
	this.componentType = "TabBar";	
};

MT.TabBar.prototype = new MT.ItemSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.TabBar} the upper-left-most visible TabBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.tabBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.TabBar(this, monkeyId);
};


//
// CLASS: FlexFormItem
//
/**
 * 
 * @class
 * @extends MT.FlexContainer
 * @param app The MT.Application containing this FlexFormItem
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexFormItem = function(app, monkeyId) {
	MT.FlexContainer.call(this, app, monkeyId);
	this.componentType = "FlexFormItem";	
};

MT.FlexFormItem.prototype = new MT.FlexContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexFormItem} the upper-left-most visible FlexFormItem matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexFormItem = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexFormItem(this, monkeyId);
};


//
// CLASS: FlexMenu
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexMenu
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexMenu = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexMenu";	
};

MT.FlexMenu.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexMenu} the upper-left-most visible FlexMenu matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexMenu = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexMenu(this, monkeyId);
};

//
// METHOD: hide
//
/**
 * Hide

 * @returns void 
 */
MT.FlexMenu.prototype.hide = function() {
	return this.app.play(this, "hide", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: select
//
/**
 * Select
 * @param  {String} itemRenderer String itemRenderer

 * @returns void 
 */
MT.FlexMenu.prototype.select = function(itemRenderer) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: show
//
/**
 * Show
 * @param  {String} itemRenderer String itemRenderer

 * @returns void 
 */
MT.FlexMenu.prototype.show = function(itemRenderer) {
	return this.app.play(this, "show", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexMenu.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkScrollBar
//
/**
 * 
 * @class
 * @extends MT.SparkTrackBase
 * @param app The MT.Application containing this SparkScrollBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkScrollBar = function(app, monkeyId) {
	MT.SparkTrackBase.call(this, app, monkeyId);
	this.componentType = "SparkScrollBar";	
};

MT.SparkScrollBar.prototype = new MT.SparkTrackBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkScrollBar} the upper-left-most visible SparkScrollBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkScrollBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkScrollBar(this, monkeyId);
};


//
// CLASS: Toggle
//
/**
 * An On/Off switch. iOS: UISwitch. Android: ToggleButton
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this Toggle
 * @param monkeyId A monkeyId or ordinal
 */
MT.Toggle = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "Toggle";	
};

MT.Toggle.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Toggle} the upper-left-most visible Toggle matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.toggle = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Toggle(this, monkeyId);
};

//
// METHOD: on
//
/**
 * Toggle the button on.

 * @returns void 
 */
MT.Toggle.prototype.on = function() {
	return this.app.play(this, "on", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: off
//
/**
 * Toggle the button off.

 * @returns void 
 */
MT.Toggle.prototype.off = function() {
	return this.app.play(this, "off", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexLineChart
//
/**
 * 
 * @class
 * @extends MT.FlexCartesianChart
 * @param app The MT.Application containing this FlexLineChart
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexLineChart = function(app, monkeyId) {
	MT.FlexCartesianChart.call(this, app, monkeyId);
	this.componentType = "FlexLineChart";	
};

MT.FlexLineChart.prototype = new MT.FlexCartesianChart;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexLineChart} the upper-left-most visible FlexLineChart matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexLineChart = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexLineChart(this, monkeyId);
};


//
// CLASS: FlexDataGrid
//
/**
 * 
 * @class
 * @extends MT.FlexListBase
 * @param app The MT.Application containing this FlexDataGrid
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexDataGrid = function(app, monkeyId) {
	MT.FlexListBase.call(this, app, monkeyId);
	this.componentType = "FlexDataGrid";	
};

MT.FlexDataGrid.prototype = new MT.FlexListBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexDataGrid} the upper-left-most visible FlexDataGrid matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexDataGrid = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexDataGrid(this, monkeyId);
};

//
// METHOD: columnstretch
//
/**
 * ColumnStretch
 * @param  {int} columnIndex int columnIndex
 * @param  {Number} localX Number localX

 * @returns void 
 */
MT.FlexDataGrid.prototype.columnstretch = function(columnIndex, localX) {
	return this.app.play(this, "columnstretch", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: edit
//
/**
 * Edit
 * @param  {String} itemRenderer String itemRenderer
 * @param  {int} rowIndex int rowIndex
 * @param  {int} columnIndex int columnIndex

 * @returns void 
 */
MT.FlexDataGrid.prototype.edit = function(itemRenderer, rowIndex, columnIndex) {
	return this.app.play(this, "edit", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: headerclick
//
/**
 * HeaderClick
 * @param  {int} columnIndex int columnIndex

 * @returns void 
 */
MT.FlexDataGrid.prototype.headerclick = function(columnIndex) {
	return this.app.play(this, "headerclick", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: headershift
//
/**
 * HeaderShift
 * @param  {int} newIndex int newIndex
 * @param  {int} oldIndex int oldIndex
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexDataGrid.prototype.headershift = function(newIndex, oldIndex, triggerEvent) {
	return this.app.play(this, "headershift", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Device
//
/**
 * The device hosting the application under test.
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this Device
 * @param monkeyId A monkeyId or ordinal
 */
MT.Device = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "Device";	
};

MT.Device.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Device} the upper-left-most visible Device matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.device = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Device(this, monkeyId);
};

//
// METHOD: shake
//
/**
 * Shake the device. iOS: works great. Android: not yet implemented.

 * @returns void 
 */
MT.Device.prototype.shake = function() {
	return this.app.play(this, "shake", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: rotate
//
/**
 * Change the device orientation.
 * @param  {String} direction iOS: 'left' or 'right', Android: 'portrait' or 'landscape'

 * @returns void 
 */
MT.Device.prototype.rotate = function(direction) {
	return this.app.play(this, "rotate", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: back
//
/**
 * Navigate back. iOS: Pops the current UINavigationItem (if there is one). Android: Presses thehardware device key.

 * @returns void 
 */
MT.Device.prototype.back = function() {
	return this.app.play(this, "back", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: forward
//
/**
 * Navigate forward. iOS: Pushes the next UINavigationItem, if there is one. Android: ignored.

 * @returns void 
 */
MT.Device.prototype.forward = function() {
	return this.app.play(this, "forward", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: search
//
/**
 * Press the search key. iOS: ignored. Android: Presses the device search key.

 * @returns void 
 */
MT.Device.prototype.search = function() {
	return this.app.play(this, "search", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: menu
//
/**
 * Press the menu key. iOS: ignored. Android: Presses the device menu key.

 * @returns void 
 */
MT.Device.prototype.menu = function() {
	return this.app.play(this, "menu", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: screenshot
//
/**
 * Take a screenshot of the app under test.

 * @returns void 
 */
MT.Device.prototype.screenshot = function() {
	return this.app.play(this, "screenshot", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: get
//
/**
 * Gets the value of the given property from the component, and set it into the given variablename.
 * @param  {String} variable the name of the variable to set
 * @param  {String} propPath the property name or path expression (defaults to 'value')

 * @returns String 
 */
MT.Device.prototype.get = function(variable, propPath) {
	return this.app.play(this, "get", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexAxisRenderer
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexAxisRenderer
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexAxisRenderer = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexAxisRenderer";	
};

MT.FlexAxisRenderer.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexAxisRenderer} the upper-left-most visible FlexAxisRenderer matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexAxisRenderer = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexAxisRenderer(this, monkeyId);
};


//
// CLASS: SparkTextArea
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableTextBase
 * @param app The MT.Application containing this SparkTextArea
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkTextArea = function(app, monkeyId) {
	MT.SparkSkinnableTextBase.call(this, app, monkeyId);
	this.componentType = "SparkTextArea";	
};

MT.SparkTextArea.prototype = new MT.SparkSkinnableTextBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkTextArea} the upper-left-most visible SparkTextArea matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkTextArea = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkTextArea(this, monkeyId);
};


//
// CLASS: TextArea
//
/**
 * A multi-line input field. iOS: UITextView. Android: multiline editable TextView.
 * @class
 * @extends MT.Input
 * @param app The MT.Application containing this TextArea
 * @param monkeyId A monkeyId or ordinal
 */
MT.TextArea = function(app, monkeyId) {
	MT.Input.call(this, app, monkeyId);
	this.componentType = "TextArea";	
};

MT.TextArea.prototype = new MT.Input;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.TextArea} the upper-left-most visible TextArea matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.textArea = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.TextArea(this, monkeyId);
};


//
// CLASS: FlexChartLegend
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexChartLegend
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexChartLegend = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexChartLegend";	
};

MT.FlexChartLegend.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexChartLegend} the upper-left-most visible FlexChartLegend matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexChartLegend = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexChartLegend(this, monkeyId);
};

//
// METHOD: click
//
/**
 * Click
 * @param  {String} item String item

 * @returns void 
 */
MT.FlexChartLegend.prototype.click = function(item) {
	return this.app.play(this, "click", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexBarChart
//
/**
 * 
 * @class
 * @extends MT.FlexCartesianChart
 * @param app The MT.Application containing this FlexBarChart
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexBarChart = function(app, monkeyId) {
	MT.FlexCartesianChart.call(this, app, monkeyId);
	this.componentType = "FlexBarChart";	
};

MT.FlexBarChart.prototype = new MT.FlexCartesianChart;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexBarChart} the upper-left-most visible FlexBarChart matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexBarChart = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexBarChart(this, monkeyId);
};


//
// CLASS: Slider
//
/**
 * A Slider control. iOS: UISlider. Android: SeekBar.
 * @class
 * @extends MT.NumericSelector
 * @param app The MT.Application containing this Slider
 * @param monkeyId A monkeyId or ordinal
 */
MT.Slider = function(app, monkeyId) {
	MT.NumericSelector.call(this, app, monkeyId);
	this.componentType = "Slider";	
};

MT.Slider.prototype = new MT.NumericSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Slider} the upper-left-most visible Slider matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.slider = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Slider(this, monkeyId);
};


//
// CLASS: SparkSlider
//
/**
 * 
 * @class
 * @extends MT.SparkRange
 * @param app The MT.Application containing this SparkSlider
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkSlider = function(app, monkeyId) {
	MT.SparkRange.call(this, app, monkeyId);
	this.componentType = "SparkSlider";	
};

MT.SparkSlider.prototype = new MT.SparkRange;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkSlider} the upper-left-most visible SparkSlider matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkSlider = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkSlider(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {Number} value Number value

 * @returns void 
 */
MT.SparkSlider.prototype.change = function(value) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {int} keyModifier int keyModifier

 * @returns void 
 */
MT.SparkSlider.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Browser
//
/**
 * The browser hosting the webapp under test.
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this Browser
 * @param monkeyId A monkeyId or ordinal
 */
MT.Browser = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "Browser";	
};

MT.Browser.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Browser} the upper-left-most visible Browser matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.browser = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Browser(this, monkeyId);
};

//
// METHOD: open
//
/**
 * Open the given url.
 * @param  {String} url the url to be opened

 * @returns void 
 */
MT.Browser.prototype.open = function(url) {
	return this.app.play(this, "open", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: back
//
/**
 * Navigate the browser back to the previous page. Ignored if this is the first page.

 * @returns void 
 */
MT.Browser.prototype.back = function() {
	return this.app.play(this, "back", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: forward
//
/**
 * Navigate the browser forward to the next page. Ignored if this is the last page.

 * @returns void 
 */
MT.Browser.prototype.forward = function() {
	return this.app.play(this, "forward", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkRichText
//
/**
 * 
 * @class
 * @extends MT.SparkTextBase
 * @param app The MT.Application containing this SparkRichText
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkRichText = function(app, monkeyId) {
	MT.SparkTextBase.call(this, app, monkeyId);
	this.componentType = "SparkRichText";	
};

MT.SparkRichText.prototype = new MT.SparkTextBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkRichText} the upper-left-most visible SparkRichText matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkRichText = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkRichText(this, monkeyId);
};


//
// CLASS: CheckBox
//
/**
 * A component that can be checked or unchecked. iOS: ignored. Android: CheckBox.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this CheckBox
 * @param monkeyId A monkeyId or ordinal
 */
MT.CheckBox = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "CheckBox";	
};

MT.CheckBox.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.CheckBox} the upper-left-most visible CheckBox matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.checkBox = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.CheckBox(this, monkeyId);
};

//
// METHOD: on
//
/**
 * Check the checkbox.

 * @returns void 
 */
MT.CheckBox.prototype.on = function() {
	return this.app.play(this, "on", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: off
//
/**
 * Uncheck the checkbox.

 * @returns void 
 */
MT.CheckBox.prototype.off = function() {
	return this.app.play(this, "off", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexAdvancedDataGrid
//
/**
 * 
 * @class
 * @extends MT.FlexListBase
 * @param app The MT.Application containing this FlexAdvancedDataGrid
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexAdvancedDataGrid = function(app, monkeyId) {
	MT.FlexListBase.call(this, app, monkeyId);
	this.componentType = "FlexAdvancedDataGrid";	
};

MT.FlexAdvancedDataGrid.prototype = new MT.FlexListBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexAdvancedDataGrid} the upper-left-most visible FlexAdvancedDataGrid matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexAdvancedDataGrid = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexAdvancedDataGrid(this, monkeyId);
};

//
// METHOD: changefocus
//
/**
 * ChangeFocus
 * @param  {Boolean} shiftKey Boolean shiftKey
 * @param  {String} keyCode String keyCode

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.changefocus = function(shiftKey, keyCode) {
	return this.app.play(this, "changefocus", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: click
//
/**
 * Click
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.click = function(keyModifier) {
	return this.app.play(this, "click", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: close
//
/**
 * Close
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.close = function(itemRenderer, triggerEvent) {
	return this.app.play(this, "close", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: columngroupedadgheadershift
//
/**
 * ColumnGroupedADGHeaderShift
 * @param  {Integer} movingColumnIndex Integer movingColumnIndex
 * @param  {Integer} newColumnIndex Integer newColumnIndex
 * @param  {Integer} oldColumnIndex Integer oldColumnIndex
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.columngroupedadgheadershift = function(movingColumnIndex, newColumnIndex, oldColumnIndex, triggerEvent) {
	return this.app.play(this, "columngroupedadgheadershift", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: columnstretch
//
/**
 * ColumnStretch
 * @param  {Integer} columnIndex Integer columnIndex
 * @param  {String} localX VT_R8 localX

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.columnstretch = function(columnIndex, localX) {
	return this.app.play(this, "columnstretch", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: deselect
//
/**
 * Deselect
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.deselect = function(itemRenderer, triggerEvent, keyModifier) {
	return this.app.play(this, "deselect", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: doubleclick
//
/**
 * DoubleClick
 * @param  {String} itemRenderer String itemRenderer

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.doubleclick = function(itemRenderer) {
	return this.app.play(this, "doubleclick", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragcancel
//
/**
 * DragCancel
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.dragcancel = function(keyModifier) {
	return this.app.play(this, "dragcancel", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragdrop
//
/**
 * DragDrop
 * @param  {String} action String action
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.dragdrop = function(action, draggedItem, keyModifier) {
	return this.app.play(this, "dragdrop", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragstart
//
/**
 * DragStart
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.dragstart = function(draggedItem, keyModifier) {
	return this.app.play(this, "dragstart", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: edit
//
/**
 * Edit
 * @param  {String} itemRenderer String itemRenderer
 * @param  {Integer} rowIndex Integer rowIndex
 * @param  {Integer} columnIndex Integer columnIndex

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.edit = function(itemRenderer, rowIndex, columnIndex) {
	return this.app.play(this, "edit", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: getautomationchildat
//
/**
 * GetAutomationChildAt
 * @param  {Integer} childIndex Integer childIndex

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.getautomationchildat = function(childIndex) {
	return this.app.play(this, "getautomationchildat", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: getcelldata
//
/**
 * GetCellData
 * @param  {Integer} RowIndex Integer RowIndex
 * @param  {Integer} ColumnIndex Integer ColumnIndex
 * @param  {Boolean} RestoreOriginalPosition Boolean RestoreOriginalPosition

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.getcelldata = function(RowIndex, ColumnIndex, RestoreOriginalPosition) {
	return this.app.play(this, "getcelldata", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: getgroupeditemchildrencount
//
/**
 * GetGroupedItemChildrenCount
 * @param  {Integer} RowIndex Integer RowIndex
 * @param  {Boolean} RestoreOriginalPosition Boolean RestoreOriginalPosition

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.getgroupeditemchildrencount = function(RowIndex, RestoreOriginalPosition) {
	return this.app.play(this, "getgroupeditemchildrencount", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: getitemscount
//
/**
 * GetItemsCount

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.getitemscount = function() {
	return this.app.play(this, "getitemscount", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: getrowdata
//
/**
 * GetRowData
 * @param  {Integer} RowIndex Integer RowIndex
 * @param  {Boolean} RestoreOriginalPosition Boolean RestoreOriginalPosition

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.getrowdata = function(RowIndex, RestoreOriginalPosition) {
	return this.app.play(this, "getrowdata", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: headerclick
//
/**
 * HeaderClick
 * @param  {Integer} columnIndex Integer columnIndex
 * @param  {String} dataField String dataField
 * @param  {String} keyModifier String keyModifier
 * @param  {String} headerPart String headerPart
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.headerclick = function(columnIndex, dataField, keyModifier, headerPart, triggerEvent) {
	return this.app.play(this, "headerclick", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: headershift
//
/**
 * HeaderShift
 * @param  {Integer} newIndex Integer newIndex
 * @param  {Integer} oldIndex Integer oldIndex
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.headershift = function(newIndex, oldIndex, triggerEvent) {
	return this.app.play(this, "headershift", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: isgroupeditem
//
/**
 * IsGroupeditem
 * @param  {Integer} RowIndex Integer RowIndex
 * @param  {Boolean} RestoreOriginalPosition Boolean RestoreOriginalPosition

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.isgroupeditem = function(RowIndex, RestoreOriginalPosition) {
	return this.app.play(this, "isgroupeditem", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: mousemove
//
/**
 * MouseMove
 * @param  {Integer} localX Integer localX
 * @param  {Integer} localY Integer localY
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.mousemove = function(localX, localY, keyModifier) {
	return this.app.play(this, "mousemove", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: mousescroll
//
/**
 * MouseScroll
 * @param  {Integer} delta Integer delta

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.mousescroll = function(delta) {
	return this.app.play(this, "mousescroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: multiselect
//
/**
 * MultiSelect
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.multiselect = function(itemRenderer, triggerEvent, keyModifier) {
	return this.app.play(this, "multiselect", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: open
//
/**
 * Open
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.open = function(itemRenderer, triggerEvent) {
	return this.app.play(this, "open", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scroll
//
/**
 * Scroll
 * @param  {Integer} position Integer position
 * @param  {String} direction String direction
 * @param  {String} detail String detail

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.scroll = function(position, direction, detail) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selectindex
//
/**
 * SelectIndex
 * @param  {Integer} itemIndex Integer itemIndex
 * @param  {String} triggerEvent String triggerEvent
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.selectindex = function(itemIndex, triggerEvent, keyModifier) {
	return this.app.play(this, "selectindex", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: setfocus
//
/**
 * SetFocus

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.setfocus = function() {
	return this.app.play(this, "setfocus", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: type
//
/**
 * Type
 * @param  {String} keyCode String keyCode
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexAdvancedDataGrid.prototype.type = function(keyCode, keyModifier) {
	return this.app.play(this, "type", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkScrollBarBase
//
/**
 * 
 * @class
 * @extends MT.SparkTrackBase
 * @param app The MT.Application containing this SparkScrollBarBase
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkScrollBarBase = function(app, monkeyId) {
	MT.SparkTrackBase.call(this, app, monkeyId);
	this.componentType = "SparkScrollBarBase";	
};

MT.SparkScrollBarBase.prototype = new MT.SparkTrackBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkScrollBarBase} the upper-left-most visible SparkScrollBarBase matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkScrollBarBase = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkScrollBarBase(this, monkeyId);
};

//
// METHOD: change
//
/**
 * Change
 * @param  {Number} value Number value

 * @returns void 
 */
MT.SparkScrollBarBase.prototype.change = function(value) {
	return this.app.play(this, "change", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexCanvas
//
/**
 * 
 * @class
 * @extends MT.FlexContainer
 * @param app The MT.Application containing this FlexCanvas
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexCanvas = function(app, monkeyId) {
	MT.FlexContainer.call(this, app, monkeyId);
	this.componentType = "FlexCanvas";	
};

MT.FlexCanvas.prototype = new MT.FlexContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexCanvas} the upper-left-most visible FlexCanvas matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexCanvas = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexCanvas(this, monkeyId);
};


//
// CLASS: SparkRadioButton
//
/**
 * 
 * @class
 * @extends MT.SparkToggleButtonBase
 * @param app The MT.Application containing this SparkRadioButton
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkRadioButton = function(app, monkeyId) {
	MT.SparkToggleButtonBase.call(this, app, monkeyId);
	this.componentType = "SparkRadioButton";	
};

MT.SparkRadioButton.prototype = new MT.SparkToggleButtonBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkRadioButton} the upper-left-most visible SparkRadioButton matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkRadioButton = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkRadioButton(this, monkeyId);
};


//
// CLASS: SparkButtonBar
//
/**
 * 
 * @class
 * @extends MT.SparkButtonBarBase
 * @param app The MT.Application containing this SparkButtonBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkButtonBar = function(app, monkeyId) {
	MT.SparkButtonBarBase.call(this, app, monkeyId);
	this.componentType = "SparkButtonBar";	
};

MT.SparkButtonBar.prototype = new MT.SparkButtonBarBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkButtonBar} the upper-left-most visible SparkButtonBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkButtonBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkButtonBar(this, monkeyId);
};

//
// METHOD: select
//
/**
 * Select
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.SparkButtonBar.prototype.select = function(itemRenderer, triggerEvent) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexHLOCChart
//
/**
 * 
 * @class
 * @extends MT.FlexCartesianChart
 * @param app The MT.Application containing this FlexHLOCChart
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexHLOCChart = function(app, monkeyId) {
	MT.FlexCartesianChart.call(this, app, monkeyId);
	this.componentType = "FlexHLOCChart";	
};

MT.FlexHLOCChart.prototype = new MT.FlexCartesianChart;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexHLOCChart} the upper-left-most visible FlexHLOCChart matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexHLOCChart = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexHLOCChart(this, monkeyId);
};


//
// CLASS: SparkWindow
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableContainer
 * @param app The MT.Application containing this SparkWindow
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkWindow = function(app, monkeyId) {
	MT.SparkSkinnableContainer.call(this, app, monkeyId);
	this.componentType = "SparkWindow";	
};

MT.SparkWindow.prototype = new MT.SparkSkinnableContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkWindow} the upper-left-most visible SparkWindow matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkWindow = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkWindow(this, monkeyId);
};


//
// CLASS: SparkApplication
//
/**
 * 
 * @class
 * @extends MT.SparkSkinnableContainer
 * @param app The MT.Application containing this SparkApplication
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkApplication = function(app, monkeyId) {
	MT.SparkSkinnableContainer.call(this, app, monkeyId);
	this.componentType = "SparkApplication";	
};

MT.SparkApplication.prototype = new MT.SparkSkinnableContainer;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkApplication} the upper-left-most visible SparkApplication matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkApplication = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkApplication(this, monkeyId);
};


//
// CLASS: SparkMuteButton
//
/**
 * 
 * @class
 * @extends MT.SparkButton
 * @param app The MT.Application containing this SparkMuteButton
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkMuteButton = function(app, monkeyId) {
	MT.SparkButton.call(this, app, monkeyId);
	this.componentType = "SparkMuteButton";	
};

MT.SparkMuteButton.prototype = new MT.SparkButton;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkMuteButton} the upper-left-most visible SparkMuteButton matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkMuteButton = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkMuteButton(this, monkeyId);
};

//
// METHOD: mutedchange
//
/**
 * MutedChange

 * @returns void 
 */
MT.SparkMuteButton.prototype.mutedchange = function() {
	return this.app.play(this, "mutedchange", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: SparkLabel
//
/**
 * 
 * @class
 * @extends MT.SparkTextBase
 * @param app The MT.Application containing this SparkLabel
 * @param monkeyId A monkeyId or ordinal
 */
MT.SparkLabel = function(app, monkeyId) {
	MT.SparkTextBase.call(this, app, monkeyId);
	this.componentType = "SparkLabel";	
};

MT.SparkLabel.prototype = new MT.SparkTextBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.SparkLabel} the upper-left-most visible SparkLabel matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.sparkLabel = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.SparkLabel(this, monkeyId);
};


//
// CLASS: FlexLabel
//
/**
 * 
 * @class
 * @extends MT.FlexObject
 * @param app The MT.Application containing this FlexLabel
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexLabel = function(app, monkeyId) {
	MT.FlexObject.call(this, app, monkeyId);
	this.componentType = "FlexLabel";	
};

MT.FlexLabel.prototype = new MT.FlexObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexLabel} the upper-left-most visible FlexLabel matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexLabel = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexLabel(this, monkeyId);
};

//
// METHOD: click
//
/**
 * Click
 * @param  {Boolean} ctrlKey Boolean ctrlKey
 * @param  {Boolean} altKey Boolean altKey
 * @param  {Boolean} shiftKey Boolean shiftKey

 * @returns void 
 */
MT.FlexLabel.prototype.click = function(ctrlKey, altKey, shiftKey) {
	return this.app.play(this, "click", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexTree
//
/**
 * 
 * @class
 * @extends MT.FlexListBase
 * @param app The MT.Application containing this FlexTree
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexTree = function(app, monkeyId) {
	MT.FlexListBase.call(this, app, monkeyId);
	this.componentType = "FlexTree";	
};

MT.FlexTree.prototype = new MT.FlexListBase;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexTree} the upper-left-most visible FlexTree matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexTree = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexTree(this, monkeyId);
};

//
// METHOD: close
//
/**
 * Close
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexTree.prototype.close = function(itemRenderer, triggerEvent) {
	return this.app.play(this, "close", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: dragdrop
//
/**
 * DragDrop
 * @param  {String} action String action
 * @param  {String} dropParent String dropParent
 * @param  {String} draggedItem String draggedItem
 * @param  {String} keyModifier String keyModifier

 * @returns void 
 */
MT.FlexTree.prototype.dragdrop = function(action, dropParent, draggedItem, keyModifier) {
	return this.app.play(this, "dragdrop", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: open
//
/**
 * Open
 * @param  {String} itemRenderer String itemRenderer
 * @param  {String} triggerEvent String triggerEvent

 * @returns void 
 */
MT.FlexTree.prototype.open = function(itemRenderer, triggerEvent) {
	return this.app.play(this, "open", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: FlexToggleButtonBar
//
/**
 * 
 * @class
 * @extends MT.FlexButtonBar
 * @param app The MT.Application containing this FlexToggleButtonBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexToggleButtonBar = function(app, monkeyId) {
	MT.FlexButtonBar.call(this, app, monkeyId);
	this.componentType = "FlexToggleButtonBar";	
};

MT.FlexToggleButtonBar.prototype = new MT.FlexButtonBar;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexToggleButtonBar} the upper-left-most visible FlexToggleButtonBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexToggleButtonBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexToggleButtonBar(this, monkeyId);
};


//
// CLASS: FlexAreaChart
//
/**
 * 
 * @class
 * @extends MT.FlexCartesianChart
 * @param app The MT.Application containing this FlexAreaChart
 * @param monkeyId A monkeyId or ordinal
 */
MT.FlexAreaChart = function(app, monkeyId) {
	MT.FlexCartesianChart.call(this, app, monkeyId);
	this.componentType = "FlexAreaChart";	
};

MT.FlexAreaChart.prototype = new MT.FlexCartesianChart;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.FlexAreaChart} the upper-left-most visible FlexAreaChart matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.flexAreaChart = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.FlexAreaChart(this, monkeyId);
};




